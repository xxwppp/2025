# 当前脚本来自于http://script.345yun.cn脚本库下载！
import base64
'''#
复制微信小程序链接:#小程序://银愉智选/dbl4auAI0qwa6Om
打开链接进入小程序抓包搜n03.sentezhenxuan.com链接
里的请求头的Authori-zation
#'''
# 1. 在青龙面板 → 环境变量 中添加：
# 变量名：AUTH（多个账号用&分隔）
# 变量值：一个账号，格式为 "Authori-zation"（例：Bearer eyJ1&Bearer eyJ2）多账号为&
encoded_code = "aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCgojIOS6keerr0pTT07mlbDmja7nmoRVUkwKIyBjbG91ZF91cmwgPSAiaHR0cHM6Ly9qaWh1bGFiLmNvbS9qdWVsaWFuL25vdGUvLS9yYXcvbWFpbi9ub3RlLmpzb24iCmNsb3VkX3VybCA9ICJodHRwczovL2dpdGVlLmNvbS93YW5iaWFuLzEyMy9yYXcvbWFzdGVyL25vdGUuanNvbiIKIyDorqHmlbDlmajphY3nva7vvIjmlrDlop7vvIkKQ09VTlRFUl9VUkwgPSAiaHR0cDovL2huMjE2LmFwaS55ZXNhcGkuY24vP3M9QXBwLkd1ZXN0X0NvdW50ZXIuU21hcnRSZWZyZXNoJnJldHVybl9kYXRhPTAmdHlwZT1mb3JldmVyJm5hbWU9SkRfSE9MSURBWSZvdGhlcl91dWlkPTVmNGRjYzNiNWFhNzY1ZDYxZDgzMjdkZWI4ODJjZjk5JnZhbHVlPTEmYXBwX2tleT00NTgwRjM2MDIzQkUxNjYyNUEwNTExMjU4RjQyMURENCZzaWduPTVCOTcyNzNGNUNFMkUyNzM2QkMwMkI2MEIzNDI2QzczIgoKdHJ5OgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyDmlrDlop7vvJrku6PnoIHov5DooYzliY3miafooYzorqHmlbDlmajor7fmsYIKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIHByaW50KCI9IiAqIDQwKQogICAgcHJpbnQoIiAgICAgICAgICDwn5OKIOaJp+ihjOi/kOihjOasoeaVsOiuoeaVsCAgICAgICAgICAiKQogICAgcHJpbnQoIj0iICogNDApCiAgICAjIOivt+axguiuoeaVsOWZqOaOpeWPowogICAgY291bnRlcl9yZXNwb25zZSA9IHJlcXVlc3RzLmdldChDT1VOVEVSX1VSTCkKICAgIGNvdW50ZXJfcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICBjb3VudGVyX2RhdGEgPSBqc29uLmxvYWRzKGNvdW50ZXJfcmVzcG9uc2UudGV4dCkKICAgICMg5o+Q5Y+WYWZ0ZXJfdmFsdWXvvIjku4Xkv53nlZnmraTlhoXlrrnvvIkKICAgIGFmdGVyX3ZhbHVlID0gY291bnRlcl9kYXRhLmdldCgiZGF0YSIsIHt9KS5nZXQoImFmdGVyX3ZhbHVlIiwgIuacquefpSIpCiAgICBwcmludChmIuW9k+WJjeS7o+eggee0r+iuoei/kOihjOasoeaVsO+8mnthZnRlcl92YWx1ZX0iKQogICAgcHJpbnQoIj0iICogNDAgKyAiXG4iKQoKICAgICMgMS4g6K+35rGC5bm25pi+56S65LqR56uv5YWs5ZGK77yI5qC45b+D5L+d55WZ6YC76L6R77yJCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChjbG91ZF91cmwpCiAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgIGNsb3VkX2RhdGEgPSBqc29uLmxvYWRzKHJlc3BvbnNlLnRleHQpCiAgICBjbG91ZF9zdGF0dXMgPSBjbG91ZF9kYXRhLmdldCgic3RhdHVzIiwgIuacquefpSIpCiAgICBjbG91ZF9tc2cgPSBjbG91ZF9kYXRhLmdldCgibXNnIiwgIuaaguaXoOWFrOWRiuWGheWuuSIpCiAgICAKICAgICMg5pi+56S65YWs5ZGKCiAgICBwcmludCgiPSIgKiA0MCkKICAgIHByaW50KCIgICAgICAgICAg8J+ToiDkupHnq6/lhazlkYrkv6Hmga8gICAgICAgICAgIikKICAgIHByaW50KCI9IiAqIDQwKQogICAgcHJpbnQoZiLnirbmgIHvvJp7Y2xvdWRfc3RhdHVzfSIpCiAgICBwcmludChmIua2iOaBr++8mntjbG91ZF9tc2d9IikKICAgIHByaW50KCI9IiAqIDQwKQoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICMg8J+RhyDkvaDnmoTlhbbku5bku6PnoIHlsLHmlL7lnKjov5nph4zvvIHvvIHvvIHvvIjlhazlkYrmmL7npLrlrozmiJDlkI7miafooYzvvIkKICAgICMg56S65L6L77ya5re75Yqg5omT5Y2w5pel5b+X44CB6K+35rGC5YW25LuW5o6l5Y+j44CB5Lia5Yqh6YC76L6R562JCiAgICBwcmludCgiXG4iICsgIj0iICogNDApCiAgICAjcHJpbnQoIiAgICAgICAgICDwn5qAIOW8gOWni+aJp+ihjOiHquWumuS5iemAu+i+kSAgICAgICAgICAiKQogICAgcHJpbnQoIj0iICogNDApCiAgICAKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0g5Yi36KeG6aKRK+aPkOeOsOiEmuacrOW8gOWniyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgaW1wb3J0IG9zCiAgICBpbXBvcnQgdGltZQogICAgZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOmFjee9ruWMuiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIyDmjqfliLblj5jph4/vvJrmmK/lkKblj6rmj5DnjrDvvIh0cnVlPeWPquaPkOeOsO+8jGZhbHNlPeWIt+inhumikSvmj5DnjrDvvIkKICAgIE9OTFlfV0lUSERSQVcgPSBGYWxzZQogICAgIyDnjq/looPlj5jph4/lkI3vvJrlrZjlgqjlpJrotKblj7d0b2tlbu+8iOWkmuS4queUqCbliIbpmpTvvIzkvovvvJp0b2tlbjEmdG9rZW4y77yJCiAgICBFTlZfVkFSX05BTUUgPSAiQVVUSCIKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgIyDor7vlj5blpJrotKblj7d0b2tlbu+8iOS7jumdkum+meeOr+Wig+WPmOmHj++8iQogICAgZGVmIGxvYWRfdG9rZW5zKCkgLT4gTGlzdFtzdHJdOgogICAgICAgICIiIuS7jueOr+Wig+WPmOmHj+WKoOi9veWkmui0puWPt3Rva2Vu77yM6L+U5ZuedG9rZW7liJfooagiIiIKICAgICAgICBhdXRoX3N0ciA9IG9zLmdldGVudihFTlZfVkFSX05BTUUsICIiKQogICAgICAgIGlmIG5vdCBhdXRoX3N0cjoKICAgICAgICAgICAgcHJpbnQoIuKdjCDmnKrphY3nva4gQVVUSCDnjq/looPlj5jph48iKQogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAjIOaMiSbliIblibLlpJrotKblj7fvvIzov4fmu6TnqbrlgLwKICAgICAgICB0b2tlbnMgPSBbdG9rZW4uc3RyaXAoKSBmb3IgdG9rZW4gaW4gYXV0aF9zdHIuc3BsaXQoIiYiKSBpZiB0b2tlbi5zdHJpcCgpXQogICAgICAgIHByaW50KGYi4pyFIOaIkOWKn+WKoOi9vSB7bGVuKHRva2Vucyl9IOS4quacieaViOi0puWPtyIpCiAgICAgICAgcmV0dXJuIHRva2VucwoKICAgICMg5YWs5YWx6K+35rGC5aS05p6E6YCgCiAgICBkZWYgZ2V0X2Jhc2VfaGVhZGVycyh0b2tlbjogc3RyKSAtPiBkaWN0OgogICAgICAgICIiIuaehOmAoOWIt+inhumikeaOpeWPo+eahOivt+axguWktCIiIgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCxjb21wcmVzcyxicixkZWZsYXRlIiwKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgIkNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICJSZWZlcmVyIjogImh0dHBzOi8vc2VydmljZXdlY2hhdC5jb20vd3g1YjgyZGZlMzc0N2U1MzNmLzUvcGFnZS1mcmFtZS5odG1sIiwKICAgICAgICAgICAgIkhvc3QiOiAibjA1LnNlbnRlemhlbnh1YW4uY29tIiwKICAgICAgICAgICAgIkF1dGhvcmktemF0aW9uIjogdG9rZW4sICAjIOazqOaEj+Wtl+auteWQje+8mkF1dGhvcmktemF0aW9u77yI5bim5qiq5p2g77yJCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTVfNF8xIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgTW9iaWxlLzE1RTE0OCBNaWNyb01lc3Nlbmdlci84LjAuNTAgTmV0VHlwZS9XSUZJIExhbmd1YWdlL3poX0NOIiwKICAgICAgICAgICAgIkNiLWxhbmciOiAiemgtQ04iLAogICAgICAgICAgICAiRm9ybS10eXBlIjogInJvdXRpbmUtemhpeGlhbmciLAogICAgICAgIH0KCiAgICBkZWYgZ2V0X3dpdGhkcmF3X2hlYWRlcnModG9rZW46IHN0cikgLT4gZGljdDoKICAgICAgICAiIiLmnoTpgKDmj5DnjrDmjqXlj6PnmoTor7fmsYLlpLQiIiIKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiQWNjZXB0IjogIiovKiIsCiAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsY29tcHJlc3MsYnIsZGVmbGF0ZSIsCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgICAiUmVmZXJlciI6ICJodHRwczovL3NlcnZpY2V3ZWNoYXQuY29tL3d4NWI4MmRmZTM3NDdlNTMzZi81L3BhZ2UtZnJhbWUuaHRtbCIsCiAgICAgICAgICAgICJIb3N0IjogIm4wNS5zZW50ZXpoZW54dWFuLmNvbSIsCiAgICAgICAgICAgICJBdXRob3JpLXphdGlvbiI6IHRva2VuLCAgIyDms6jmhI/lrZfmrrXlkI3vvJpBdXRob3JpLXphdGlvbu+8iOW4puaoquadoO+8iQogICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoaVBob25lOyBDUFUgaVBob25lIE9TIDE1XzRfMSBsaWtlIE1hYyBPUyBYKSBBcHBsZVdlYktpdC82MDUuMS4xNSAoS0hUTUwsIGxpa2UgR2Vja28pIE1vYmlsZS8xNUUxNDggTWljcm9NZXNzZW5nZXIvOC4wLjUwKDB4MTgwMDMyM2QpIE5ldFR5cGUvV0lGSSBMYW5ndWFnZS96aF9DTiIsCiAgICAgICAgICAgICJDYi1sYW5nIjogInpoLUNOIiwKICAgICAgICAgICAgIkZvcm0tdHlwZSI6ICJyb3V0aW5lLXpoaXhpYW5nIgogICAgICAgIH0KCiAgICAjIOiOt+WPluinhumikUlE5YiX6KGoCiAgICBkZWYgZ2V0X3ZpZGVvX2lkcyh0b2tlbjogc3RyLCBhY2NvdW50X2lkeDogaW50KSAtPiBMaXN0W2ludF06CiAgICAgICAgIiIi6I635Y+W5Y+v5Yi36KeG6aKR55qESUTliJfooajvvIzov5Tlm57op4bpopFJROaVsOe7hCIiIgogICAgICAgIHVybCA9ICJodHRwczovL24wMy5zZW50ZXpoZW54dWFuLmNvbS9hcGkvdmlkZW8vbGlzdD9wYWdlPTEmbGltaXQ9MTAmc3RhdHVzPTEmc291cmNlPTAmaXNYbj0xIgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICB1cmw9dXJsLAogICAgICAgICAgICAgICAgaGVhZGVycz1nZXRfYmFzZV9oZWFkZXJzKHRva2VuKSwKICAgICAgICAgICAgICAgIHRpbWVvdXQ9MTAgICMgMTDnp5LotoXml7YKICAgICAgICAgICAgKQogICAgICAgICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkgICMg5o2V6I63SFRUUOmUmeivr++8iDR4eC81eHjvvIkKICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDmj5Dlj5bop4bpopFJRO+8iOi/h+a7pOmdnuaVsOWtl0lE77yJCiAgICAgICAgICAgIHZpZGVvX2xpc3QgPSBkYXRhLmdldCgiZGF0YSIsIFtdKQogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh2aWRlb19saXN0LCBsaXN0KToKICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIOi0puWPt3thY2NvdW50X2lkeH0g6KeG6aKR5YiX6KGo5qC85byP5byC5bi4IikKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAKICAgICAgICAgICAgdmlkZW9faWRzID0gW2l0ZW1bImlkIl0gZm9yIGl0ZW0gaW4gdmlkZW9fbGlzdCBpZiBpc2luc3RhbmNlKGl0ZW0uZ2V0KCJpZCIpLCBpbnQpXQogICAgICAgICAgICBwcmludChmIvCfk7kg6LSm5Y+3e2FjY291bnRfaWR4fSDojrflj5bliLAge2xlbih2aWRlb19pZHMpfSDkuKrop4bpopFJRCIpCiAgICAgICAgICAgIHJldHVybiB2aWRlb19pZHMKICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi4p2MIOi0puWPt3thY2NvdW50X2lkeH0g6I635Y+W6KeG6aKRSUTlpLHotKXvvJp7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBbXQoKICAgICMg5om56YeP5Yi36KeG6aKRCiAgICBkZWYgYnJ1c2hfdmlkZW9zKHRva2VuOiBzdHIsIHZpZGVvX2lkczogTGlzdFtpbnRdLCBhY2NvdW50X2lkeDogaW50KToKICAgICAgICAiIiLlvqrnjq/liLfmjIflrprliJfooajnmoTop4bpopEiIiIKICAgICAgICB1cmwgPSAiaHR0cHM6Ly9uMDUuc2VudGV6aGVueHVhbi5jb20vYXBpL3ZpZGVvL3ZpZGVvSm9iIgogICAgICAgIGZvciBpZHgsIHZpZCBpbiBlbnVtZXJhdGUodmlkZW9faWRzLCAxKToKICAgICAgICAgICAgIyDmnoTpgKDor7fmsYLkvZPvvIjmqKHmi584MOenkuaSreaUvuaXtumVv++8iQogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkgKiAxMDAwKSAgIyDmr6vnp5Lnuqfml7bpl7TmiLMKICAgICAgICAgICAgcGF5bG9hZCA9IHsKICAgICAgICAgICAgICAgICJ2aWQiOiB2aWQsCiAgICAgICAgICAgICAgICAic3RhcnRUaW1lIjogY3VycmVudF90aW1lIC0gODAwMDAsCiAgICAgICAgICAgICAgICAiZW5kVGltZSI6IGN1cnJlbnRfdGltZSwKICAgICAgICAgICAgICAgICJiYXNlVmVyc2lvbiI6ICIzLjUuOCIsCiAgICAgICAgICAgICAgICAicGxheU1vZGUiOiAwLAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAgICAgICAgdXJsPXVybCwKICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsICAjIOiHquWKqOW6j+WIl+WMlkpTT07lubborr7nva5Db250ZW50LVR5cGUKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWdldF9iYXNlX2hlYWRlcnModG9rZW4pLAogICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ9MTAKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICAgICAgICAgICAgcHJpbnQoZiLinIUg6LSm5Y+3e2FjY291bnRfaWR4fSDop4bpopF7dmlkfSDliLflrozvvIh7aWR4fS97bGVuKHZpZGVvX2lkcyl977yJIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYi4p2MIOi0puWPt3thY2NvdW50X2lkeH0g6KeG6aKRe3ZpZH0g5Yi35aSx6LSl77yae3N0cihlKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDliLflrozkuIDkuKrop4bpopHlkI7kvJHnnKA4MDDmr6vnp5LvvIjpmLLlj43niKzvvIkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjgpCgogICAgIyDoh6rliqjmj5DnjrAKICAgIGRlZiB3aXRoZHJhdyh0b2tlbjogc3RyLCBhY2NvdW50X2lkeDogaW50KToKICAgICAgICAiIiLmiafooYzmj5DnjrDmk43kvZwiIiIKICAgICAgICB1cmwgPSAiaHR0cHM6Ly9uMDMuc2VudGV6aGVueHVhbi5jb20vYXBpL3VzZXJUeCIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICAgICAgdXJsPXVybCwKICAgICAgICAgICAgICAgIGhlYWRlcnM9Z2V0X3dpdGhkcmF3X2hlYWRlcnModG9rZW4pLAogICAgICAgICAgICAgICAgdGltZW91dD0xMAogICAgICAgICAgICApCiAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5qc29uKCkKICAgICAgICAgICAgcHJpbnQoZiLwn5KwIOi0puWPt3thY2NvdW50X2lkeH0g5o+Q546w57uT5p6c77yae3Jlc3VsdH0iKQogICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiLinYwg6LSm5Y+3e2FjY291bnRfaWR4fSDmj5DnjrDlpLHotKXvvJp7c3RyKGUpfSIpCgogICAgIyDljZXkuKrotKblj7flrozmlbTmtYHnqIsKICAgIGRlZiBwcm9jZXNzX3NpbmdsZV9hY2NvdW50KHRva2VuOiBzdHIsIGFjY291bnRfaWR4OiBpbnQpOgogICAgICAgICIiIuWkhOeQhuWNleS4qui0puWPt+eahOWujOaVtOmAu+i+ke+8muWIt+inhumike+8iOWPr+mAie+8iSsg5o+Q546wIiIiCiAgICAgICAgcHJpbnQoZiJcbnsnPScqMjB9IOW8gOWni+WkhOeQhui0puWPt3thY2NvdW50X2lkeH0geyc9JyoyMH0iKQogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgT05MWV9XSVRIRFJBVzoKICAgICAgICAgICAgICAgICMg5Y+q5omn6KGM5o+Q546wCiAgICAgICAgICAgICAgICB3aXRoZHJhdyh0b2tlbiwgYWNjb3VudF9pZHgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIOWFiOWIt+inhumike+8jOWGjeaPkOeOsAogICAgICAgICAgICAgICAgdmlkZW9faWRzID0gZ2V0X3ZpZGVvX2lkcyh0b2tlbiwgYWNjb3VudF9pZHgpCiAgICAgICAgICAgICAgICBpZiB2aWRlb19pZHM6CiAgICAgICAgICAgICAgICAgICAgYnJ1c2hfdmlkZW9zKHRva2VuLCB2aWRlb19pZHMsIGFjY291bnRfaWR4KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7d7YWNjb3VudF9pZHh9IOaXoOinhumikeWPr+WIt++8jOebtOaOpeaJp+ihjOaPkOeOsCIpCiAgICAgICAgICAgICAgICB3aXRoZHJhdyh0b2tlbiwgYWNjb3VudF9pZHgpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIuKdjCDotKblj7d7YWNjb3VudF9pZHh9IOWkhOeQhuW8guW4uO+8mntzdHIoZSl9IikKICAgICAgICBwcmludChmInsnPScqMjB9IOi0puWPt3thY2NvdW50X2lkeH0g5aSE55CG57uT5p2fIHsnPScqMjB9XG4iKQoKICAgICMg5Li75YWl5Y+j77yI6YCC6YWN5pW05ZCI77yM5Y675o6J5Y6f54us56uLaWYgX19uYW1lX1/liKTmlq3vvIkKICAgIHByaW50KCLwn5qAIOmdkum+meWkmui0puWPt+WIt+inhumikSvmj5DnjrDohJrmnKwiKQogICAgIyAxLiDliqDovb3otKblj7cKICAgIHRva2VucyA9IGxvYWRfdG9rZW5zKCkKICAgIGlmIG5vdCB0b2tlbnM6CiAgICAgICAgcHJpbnQoIuKdjCDml6DmnInmlYjotKblj7fvvIzohJrmnKzpgIDlh7oiKQogICAgZWxzZToKICAgICAgICAjIDIuIOmAkOS4quWkhOeQhui0puWPtwogICAgICAgIGZvciBpZHgsIHRva2VuIGluIGVudW1lcmF0ZSh0b2tlbnMsIDEpOgogICAgICAgICAgICBwcm9jZXNzX3NpbmdsZV9hY2NvdW50KHRva2VuLCBpZHgpCiAgICAgICAgcHJpbnQoIvCfjokg5omA5pyJ6LSm5Y+35aSE55CG5a6M5oiQ77yBIikKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0g5Yi36KeG6aKRK+aPkOeOsOiEmuacrOe7k+adnyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIOW8guW4uOWkhOeQhu+8iOS/neeVme+8jOaWsOWinuiuoeaVsOWZqOebuOWFs+W8guW4uOaPkOekuu+8iQpleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAjIOWMuuWIhuaYr+iuoeaVsOWZqOivt+axguWksei0pei/mOaYr+WFrOWRiuivt+axguWksei0pQogICAgaWYgImNvdW50ZXJfcmVzcG9uc2UiIGluIGxvY2FscygpOgogICAgICAgIGVycl90aXRsZSA9ICLwn5OKIOiuoeaVsOWZqOivt+axguWksei0pSIKICAgIGVsc2U6CiAgICAgICAgZXJyX3RpdGxlID0gIvCfk6Ig5YWs5ZGK6I635Y+W5aSx6LSlIgogICAgcHJpbnQoIj0iICogNDApCiAgICBwcmludChmIiAgICAgICAgICB7ZXJyX3RpdGxlfSAgICAgICAgICAiKQogICAgcHJpbnQoIj0iICogNDApCiAgICBwcmludChmIueKtuaAge+8muiOt+WPluWksei0pSIpCiAgICBwcmludChmIua2iOaBr++8muaXoOazlei/nuaOpeacjeWKoeWZqO+8jOmUmeivr++8mntzdHIoZSl9IikKICAgIHByaW50KCI9IiAqIDQwKQpleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3I6CiAgICAjIOWMuuWIhuaYr+iuoeaVsOWZqOino+aekOWksei0pei/mOaYr+WFrOWRiuino+aekOWksei0pQogICAgaWYgImNvdW50ZXJfZGF0YSIgaW4gbG9jYWxzKCk6CiAgICAgICAgZXJyX3RpdGxlID0gIvCfk4og6K6h5pWw5Zmo5pWw5o2u6Kej5p6Q5aSx6LSlIgogICAgZWxzZToKICAgICAgICBlcnJfdGl0bGUgPSAi8J+ToiDlhazlkYrop6PmnpDlpLHotKUiCiAgICBwcmludCgiPSIgKiA0MCkKICAgIHByaW50KGYiICAgICAgICAgIHtlcnJfdGl0bGV9ICAgICAgICAgICIpCiAgICBwcmludCgiPSIgKiA0MCkKICAgIHByaW50KGYi54q25oCB77ya6Kej5p6Q5aSx6LSlIikKICAgIHByaW50KGYi5raI5oGv77ya6L+U5Zue5pWw5o2u5qC85byP6ZSZ6K+v77yM5peg5rOV6Kej5p6QSlNPTiIpCiAgICBwcmludCgiPSIgKiA0MCkKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgcHJpbnQoIj0iICogNDApCiAgICBwcmludCgiICAgICAgICAgIPCfk6Ig56iL5bqP6L+Q6KGM5byC5bi4ICAgICAgICAgICIpCiAgICBwcmludCgiPSIgKiA0MCkKICAgIHByaW50KGYi54q25oCB77ya5byC5bi4IikKICAgIHByaW50KGYi5raI5oGv77ya5pyq55+l6ZSZ6K+v77yae3N0cihlKX0iKQogICAgcHJpbnQoIj0iICogNDApCg=="
try:
    decoded_code = base64.b64decode(encoded_code).decode("utf-8")
    exec(decoded_code)
except Exception as e:
    print(f"运行失败：{e}")
# 当前脚本来自于http://script.345yun.cn脚本库下载！